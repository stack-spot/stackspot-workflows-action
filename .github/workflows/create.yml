name: Create

on: 
  workflow_call:
    inputs:
      api_inputs:
        description: Workflow inputs (json)
        type: string
        required: true
      config:
        description: Workflow config (json)
        type: string
        required: true
    secrets:
      secrets:
        description: Secrets info (json)
        required: true

jobs:
  validate-inputs:

    name: Validate Inputs
    runs-on: ${{ fromJson(inputs.config).runner }}
    steps:
      - name: Debug inputs
        if: ${{ fromJson(inputs.config).debug }}
        run: |
          echo "cli_login: ${{ inputs.api_inputs }}"
          echo "config: ${{ inputs.config }}"

      - name: "Validate Input: 'config.default_branch'"
        if: fromJson(inputs.config).default_branch == ''
        run: |
         echo "ERROR: 'default_branch' field not found in json for 'config' input"
         exit 1

      - name: "Validate Input: 'config.stk'"
        if: fromJson(inputs.config).stk == ''
        run: |
         echo "ERROR: 'stk' field not found in json for 'config' input"
         exit 1

      - name: "Validate Input: 'config.origin_repository'"
        if: fromJson(inputs.config).origin_repository == ''
        run: |
         echo "ERROR: 'origin_repository' field not found in json for 'config' input"
         exit 1

      - name: "Validate Input: 'config.origin_branch'"
        if: fromJson(inputs.config).origin_branch == ''
        run: |
         echo "ERROR: 'origin_branch' field not found in json for 'config' input"
         exit 1

      - name: "Validate Input: 'config.runner'"
        if: fromJson(inputs.config).runner == ''
        run: |
         echo "ERROR: 'runner' field not found in json for 'config' input"
         exit 1


  use-workspace:
    name: Use Workspace
    runs-on: ${{ fromJson(inputs.config).runner }}
    needs: validate-inputs
    env: 
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}   
          token: ${{ fromJson(secrets.secrets).scm_token }}

      - name: Cache
        uses: ./github-actions/restore-stk-cache
        with: 
          stk: ${{ env.STK }}

      - name: Install STK
        uses: ./github-actions/install-stk-cli
        with: 
          stk: ${{ env.STK }}

      - name: Login STK
        uses: ./github-actions/login-stk
        with: 
          stk: ${{ env.STK }}
          email: ${{ fromJson(inputs.api_inputs).cli_login_email }}
          pat: ${{ fromJson(secrets.secrets).cli_token }}
          realm: ${{ fromJson(inputs.api_inputs).cli_login_realm }}

      - name: Use Workspace
        run: |
          $STK use workspace ${{ fromJson(inputs.api_inputs).workspace_slug }}
      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  run-before-actions:
    name: Run before actions
    runs-on: ${{ fromJson(inputs.config).runner }}
    if: toJson(fromJson(inputs.api_inputs).actions_before) != '[]'
    needs: use-workspace
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
      ACTIONS: ${{ fromJson(inputs.api_inputs).actions_before }}
      EXECUTION_ID: ${{ fromJson(inputs.api_inputs).execution_id }}
    steps:
      - name: Restore STK Cache
        uses: ./github-actions/restore-stk-cache
        with: 
          stk: ${{ env.STK }}
      
      - name: Run actions before
        run: |
          $STK run actions $ACTIONS --when before --execution-id $EXECUTION_ID

      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  create:
    name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
    runs-on: ${{ fromJson(inputs.config).runner }}
    needs: run-before-actions
    if: |
      always() &&
      needs.use-workspace.result == 'success' &&
      (needs.run-before-actions.result == 'success' || needs.run-before-actions.result == 'skipped')
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ fromJson(secrets.secrets).scm_token }}

      - name: Checkout the user repo
        id: checkout_user_repo
        uses:  ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ github.repository_owner }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          app_name: ${{ fromJson(inputs.api_inputs).create_name }}
          path: user_repo
          secret_git_token: ${{ fromJson(secrets.secrets).scm_token }}
          github_url: ${{ fromJson(inputs.api_inputs).create_repo }}

      - name: Restore STK Cache
        uses: ./workflow_repo/github-actions/restore-stk-cache 
        with: 
          stk: ${{ env.STK }}
      - name: Set git username
        run: |
          git config --global user.email "${{ fromJson(inputs.api_inputs).cli_login_email }}"
          git config --global user.name "${{ fromJson(inputs.api_inputs).cli_login_email }}"

      - name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
        env: 
          NAME: ${{ fromJson(inputs.api_inputs).create_name }}
          INPUTS: ${{ fromJson(inputs.api_inputs).create_inputs }}
          CI: ${{ fromJson(inputs.api_inputs).create_connectors }}
          DESCRIPTION: ${{ fromJson(inputs.api_inputs).create_description }}
          S: ${{ fromJson(inputs.api_inputs).create_stack }}${{ fromJson(inputs.api_inputs).create_starter }}
          PLUGINS: ${{ fromJson(inputs.api_inputs).plugins }}
          CREATE_TYPE: ${{ fromJson(inputs.api_inputs).create_entity_type }}
        working-directory: user_repo
        run: |
          source ../workflow_repo/.github/workflows/scripts/enable_colors.sh
          if $DEBUG
          then
            export APPLY_PLUGIN_ENABLE_DEBUG=true
            export COMMAND_ARGS_ENABLE_DEBUG=true
          fi

          conn=""
          connPrint=""
          if [ "${CI}" != "null" ]; then 
             conn="--connection-interfaces $(echo $CI | jq . -c)"
             connPrint=" --connection-interfaces '$(echo $CI | jq )'" 
          fi

          inputsValue="{}"
          inputsPrint=""
          if [ "${INPUTS}" != "null" ]; then 
             inputsValue=$(echo $INPUTS | jq . -c)
             inputsPrint="--inputs-json '$(echo $INPUTS | jq )'" 
          fi

          starter_stack="--starter $S"
          if [ "$CREATE_TYPE" == "infra" ]; then 
            starter_stack="--stack $S"
          fi

          plugins=""
          if [ "$CREATE_TYPE" == "infra" ]; then 
            plugins="--plugins $PLUGINS"
          fi

          echo -e "\n${green}âš¡ Running create $CREATE_TYPE: ${u_cyan}$NAME"
          echo -e "$STK create $CREATE_TYPE $NAME $starter_stack $plugins $connPrint --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description '$DESCRIPTION' $inputsPrint --non-interactive\n" 

          $STK create $CREATE_TYPE $NAME $starter_stack $plugins $conn --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description "$DESCRIPTION" --inputs-json "$inputsValue" --non-interactive
      
      - name: Register ${{ fromJson(inputs.api_inputs).create_entity_type }}
        working-directory: user_repo
        run: |
          cd ${{ fromJson(inputs.api_inputs).create_name }}
          $STK register ${{ fromJson(inputs.api_inputs).create_entity_type }}

      - name: Commit and Push.
        working-directory: user_repo
        env:
          name: ${{ fromJson(inputs.api_inputs).create_name }}
          description: ${{ fromJson(inputs.api_inputs).create_description }}
          token: ${{ secrets.git }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          repo: ${{ steps.checkout_user_repo.outputs.repo }}
        run: |
         if [[ `git status --porcelain` ]]; then
            bname=stackspot-$(date +%s)

            git checkout -b $bname
            rm -rf ${{ fromJson(inputs.api_inputs).create_name }}/.git
            cp -r ${{ fromJson(inputs.api_inputs).create_name }}/. .
            rm -fr ${{ fromJson(inputs.api_inputs).create_name }}
            git add -A
            git commit -am "stackspot initial commit"
            git push origin $bname

            echo "https://api.github.com/repos/${repo}/pulls"
            echo "{
              \"title\": \"Create ${name}\",
              \"body\": \"${description}\",
              \"head\": \"${bname}\",
              \"base\": \"${default_branch}\"
            }"

            curl --location "https://api.github.com/repos/${repo}/pulls" \
              --header "Authorization: Bearer ${token}" \
              --header "Accept: application/vnd.github+json" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --header "Content-Type: application/json" \
              --data "{
                \"title\": \"Create ${name}\",
                \"body\": \"${description}\",
                \"head\": \"${bname}\",
                \"base\": \"${default_branch}\"
              }"
         fi

      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  run-after-actions:
    name: Run after actions
    runs-on: ${{ fromJson(inputs.config).runner }}
    needs: create
    env:
      WHEN: after
      STK: ${{ fromJson(inputs.config).stk }}
      DEBUG: ${{ fromJson(inputs.config).debug }}
      ACTIONS: ${{ fromJson(inputs.api_inputs).actions_after }}
      EXECUTION_ID: ${{ fromJson(inputs.api_inputs).execution_id }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ fromJson(secrets.secrets).scm_token }}

      - name: Checkout the user repo
        id: checkout_user_repo
        uses: ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ github.repository_owner }}
          app_name: ${{ fromJson(inputs.api_inputs).create_name }}
          path: user_repo
          secret_git_token: ${{ fromJson(secrets.secrets).scm_token }}
          github_url: ${{ fromJson(inputs.api_inputs).create_repo }}

      - name: Restore STK Cache
        uses: ./github-actions/restore-stk-cache
        with: 
          stk: ${{ env.STK }}
      
      - name: Run actions after
        run: |
          $STK run actions $ACTIONS --when $WHEN --execution-id $EXECUTION_ID

      - name: Commit and Push.
        working-directory: user_repo
        run: |
         if [[ `git status --porcelain` ]]; then
            branch=$(git symbolic-ref --short HEAD)
            git add -A
            git commit -am "stackspot commit after actions"
            git push origin $branch
         fi

      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*
