name: Create

on: 
  workflow_call:
    inputs:
      api_inputs:
        description: Workflow inputs (json)
        type: string
        required: true
      config:
        description: Workflow config (json)
        type: string
        required: true
    secrets:
      secrets:
        description: Secrets info (json)
        required: true

jobs:
  create:
    name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
    runs-on: ${{ fromJson(inputs.config).runner }}
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Sensitive inputs
        run: |
          sensitive=$(echo '${{ secrets.secrets }}' | jq -cr '.sensitive' | jq -r '.[]')
          for s in $sensitive; do
            echo "::add-mask::${s}"
          done

      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ fromJson(secrets.secrets).scm_token }}

      - name: Restore STK Cache
        uses: ./workflow_repo/github-actions/restore-stk-cache 
        with: 
          stk: ${{ env.STK }}
      - name: Set git username
        run: |
          git config --global user.email "${{ fromJson(inputs.api_inputs).cli_login_email }}"
          git config --global user.name "${{ fromJson(inputs.api_inputs).cli_login_email }}"

      - name: Run before actions
        run: |
          run_actions_before_cmd=$(echo '${{ secrets.secrets }}' | jq -cr '.run_actions_before_cmd' | base64 --decode)
          set -x
          eval "$STK $run_actions_before_cmd"
  
      - name: Checkout the user repo
        id: checkout_user_repo
        uses:  ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ fromJson(inputs.config).github_org }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          app_name: ${{ fromJson(inputs.api_inputs).create_name }}
          path: user_repo
          secret_git_token: ${{ fromJson(secrets.secrets).scm_token }}
          github_url: ${{ fromJson(inputs.api_inputs).create_repo }}

      - name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
        working-directory: user_repo
        run: |
          create_cmd=$(echo '${{ secrets.secrets }}' | jq -cr '.create_cmd' | base64 --decode)
          (echo '${{ secrets.secrets }}' | jq -cr '.create_file' | base64 --decode) > create_file.yml
          cat create_file.yml
          eval "$STK $create_cmd --spec create_file.yml"
          rm -f create_file.yml

      - name: Update ${{ fromJson(inputs.api_inputs).create_entity_type }} ${{ fromJson(inputs.api_inputs).register_id }}
        working-directory: user_repo
        run: |
          update_cmd=$(echo '${{ secrets.secrets }}' | jq -cr '.update_cmd' | base64 --decode)
          cd ${{ fromJson(inputs.api_inputs).create_name }}
          echo "$STK $update_cmd"
          eval "$STK $update_cmd"

      - name: Commit and Push.
        working-directory: user_repo
        env:
          name: ${{ fromJson(inputs.api_inputs).create_name }}
          description: ${{ fromJson(inputs.api_inputs).create_description }}
          token: ${{ fromJson(secrets.secrets).scm_token }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          repo: ${{ steps.checkout_user_repo.outputs.repo }}
        run: |
         if [[ `git status --porcelain` ]]; then
            bname=stackspot-$(date +%s)

            git checkout -b $bname
            rm -rf ${{ fromJson(inputs.api_inputs).create_name }}/.git
            cp -r ${{ fromJson(inputs.api_inputs).create_name }}/. .
            rm -fr ${{ fromJson(inputs.api_inputs).create_name }}
            git add -A
            git commit -am "stackspot initial commit"
            git push origin $bname

            echo "https://api.github.com/repos/${repo}/pulls"
            echo "{
              \"title\": \"Create ${name}\",
              \"body\": \"${description}\",
              \"head\": \"${bname}\",
              \"base\": \"${default_branch}\"
            }"

            curl --location "https://api.github.com/repos/${repo}/pulls" \
              --header "Authorization: Bearer ${token}" \
              --header "Accept: application/vnd.github+json" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --header "Content-Type: application/json" \
              --data "{
                \"title\": \"Create ${name}\",
                \"body\": \"${description}\",
                \"head\": \"${bname}\",
                \"base\": \"${default_branch}\"
              }"
         fi

      - name: Run after actions
        run: |
          run_actions_after_cmd=$(echo '${{ secrets.secrets }}' | jq -cr '.run_actions_after_cmd' | base64 --decode)
          set -x
          eval "$STK $run_actions_after_cmd"

      - name: Commit and Push.
        working-directory: user_repo
        run: |
         if [[ `git status --porcelain` ]]; then
            branch=$(git symbolic-ref --short HEAD)
            echo $branch
            echo "------------------||------------------"

            git add -A
            git commit -am "stackspot commit after actions"
            git push origin $branch
         fi

      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*
