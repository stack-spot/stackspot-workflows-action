name: Create

on: 
  workflow_call:
    inputs:
      api_inputs:
        description: Workflow inputs (json)
        type: string
        required: true
      config:
        description: Workflow config (json)
        type: string
        required: true
    secrets:
      secrets:
        description: Secrets info (json)
        required: true

jobs:
  create:
    name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
    runs-on: ${{ fromJson(inputs.config).runner }}
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ fromJson(secrets.secrets).scm_token }}

      - name: Restore STK Cache
        uses: ./workflow_repo/github-actions/restore-stk-cache 
        with: 
          stk: ${{ env.STK }}
      - name: Set git username
        run: |
          git config --global user.email "${{ fromJson(inputs.api_inputs).cli_login_email }}"
          git config --global user.name "${{ fromJson(inputs.api_inputs).cli_login_email }}"

      - name: Run before actions
        env:
          EXECUTION_ID: ${{ fromJson(inputs.api_inputs).execution_id }}
          CREATE_NAME: ${{ fromJson(inputs.api_inputs).create_name }}
          CREATE_DESCRIPTION: ${{ fromJson(inputs.api_inputs).create_description }}
          TOKEN: ${{ fromJson(secrets.secrets).scm_token }}
          GITHUB_ORG: ${{ fromJson(inputs.config).github_org }}
        run: |
          before_actions_raw=$(echo '${{ inputs.api_inputs }}' | jq -r .before_actions)
          before_actions_raw=$(echo "$before_actions_raw" | jq ". + []")
          if $DEBUG
          then
            echo "before_actions_raw:"
            echo $before_actions_raw
            echo "------------------||------------------"
          fi

          create_repo_action=$(echo '${{ inputs.api_inputs }}' | jq -r .create_repo_action)
          if $DEBUG
          then
            echo "create_repo_action:"
            echo $create_repo_action
            echo "------------------||------------------"
          fi

          reposi_action="[]"
          if [ -n "$create_repo_action" ] && [ "$create_repo_action" != "null" ]; then
            inputs_repo=$(echo "{\"org\": \"$GITHUB_ORG\",\"token\": \"$TOKEN\", \"name\": \"$CREATE_NAME\", \"description\": \"$CREATE_DESCRIPTION\"}")
            if $DEBUG
            then
              echo "inputs_repo:"
              echo $inputs_repo
              echo "------------------||------------------"
            fi

            action_inputs=$(echo "$create_repo_action" | jq -cr .inputs)
            if $DEBUG
            then
              echo "action_inputs:"
              echo $action_inputs
              echo "------------------||------------------"
            fi
            
            merged_inputs=$(echo $action_inputs $inputs_repo | jq -cs add)
            if $DEBUG
            then
              echo "merged_inputs:"
              echo $merged_inputs
              echo "------------------||------------------"
            fi
              
            parsed_inputs=$(echo "{ \"inputs\": $merged_inputs }")
            if $DEBUG
            then
              echo "parsed_inputs:"
              echo $parsed_inputs
              echo "------------------||------------------"
            fi

            reposi_action=$(echo $create_repo_action | jq ". + $parsed_inputs")
            if $DEBUG
            then
              echo "reposi_action:"
              echo $reposi_action
              echo "------------------||------------------"
            fi
            reposi_action="[$reposi_action]"
          fi
          
          before_actions=$(echo $reposi_action | jq ". + $before_actions_raw")
          if $DEBUG
          then
            echo "before_actions:"
            echo $before_actions
            echo "------------------||------------------"
          fi

          $STK run actions --actions "$before_actions" --when before --execution-id $EXECUTION_ID

      - name: Checkout the user repo
        id: checkout_user_repo
        uses:  ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ fromJson(inputs.config).github_org }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          app_name: ${{ fromJson(inputs.api_inputs).create_name }}
          path: user_repo
          secret_git_token: ${{ fromJson(secrets.secrets).scm_token }}
          github_url: ${{ fromJson(inputs.api_inputs).create_repo }}

      - name: Create ${{ fromJson(inputs.api_inputs).create_entity_type }}
        env: 
          NAME: ${{ fromJson(inputs.api_inputs).create_name }}
          DESCRIPTION: ${{ fromJson(inputs.api_inputs).create_description }}
          S: ${{ fromJson(inputs.api_inputs).stack }}${{ fromJson(inputs.api_inputs).starter }}
          CREATE_TYPE: ${{ fromJson(inputs.api_inputs).create_entity_type }}
        working-directory: user_repo
        run: |
          source ../workflow_repo/.github/workflows/scripts/enable_colors.sh
          INPUTS=$(echo '${{ inputs.api_inputs }}' | jq -r .create_inputs)
          CI=$(echo '${{ inputs.api_inputs }}' | jq -r .create_connectors)
          PLUGINS=$(echo '${{ inputs.api_inputs }}' | jq -r .plugins)
          
          conn=""
          connPrint=""
          if [ "$CI" != "" ]; then 
             conn="--connection-interfaces $(echo $CI | jq . -c)"
             connPrint=" --connection-interfaces '$(echo $CI | jq )'" 
          fi

          inputsValue="{}"
          inputsPrint=""
          if [ "$INPUTS" != "" ]; then 
             inputsValue=$(echo $INPUTS | jq . -c)
             inputsPrint="--inputs-json '$(echo $INPUTS | jq )'" 
          fi

          starter_stack="--starter $S"
          if [ "$CREATE_TYPE" == "infra" ]; then 
            starter_stack="--stack $S"
          fi

          plugins=""
          if [ "$CREATE_TYPE" == "infra" ]; then
            plugins="--plugins $PLUGINS"
          fi

          echo -e "\n${green}âš¡ Running create $CREATE_TYPE: ${u_cyan}$NAME"
          echo -e "$STK create $CREATE_TYPE $NAME $starter_stack $plugins $connPrint --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description '$DESCRIPTION' $inputsPrint --non-interactive --skip-validate-existing\n" 
  
          $STK create $CREATE_TYPE $NAME $starter_stack $plugins $conn --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description "$DESCRIPTION" --inputs-json "$inputsValue" --non-interactive --skip-validate-existing

      - name: Update ${{ fromJson(inputs.api_inputs).create_entity_type }} ${{ fromJson(inputs.api_inputs).register_id }}
        if: toJson(fromJson(inputs.api_inputs).register_id) != ''
        working-directory: user_repo
        run: |
          cd ${{ fromJson(inputs.api_inputs).create_name }}
          $STK update ${{ fromJson(inputs.api_inputs).create_entity_type }} --id ${{ fromJson(inputs.api_inputs).register_id }}

      - name: Commit and Push.
        working-directory: user_repo
        env:
          name: ${{ fromJson(inputs.api_inputs).create_name }}
          description: ${{ fromJson(inputs.api_inputs).create_description }}
          token: ${{ fromJson(secrets.secrets).scm_token }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          repo: ${{ steps.checkout_user_repo.outputs.repo }}
        run: |
         if [[ `git status --porcelain` ]]; then
            bname=stackspot-$(date +%s)

            git checkout -b $bname
            rm -rf ${{ fromJson(inputs.api_inputs).create_name }}/.git
            cp -r ${{ fromJson(inputs.api_inputs).create_name }}/. .
            rm -fr ${{ fromJson(inputs.api_inputs).create_name }}
            git add -A
            git commit -am "stackspot initial commit"
            git push origin $bname

            echo "https://api.github.com/repos/${repo}/pulls"
            echo "{
              \"title\": \"Create ${name}\",
              \"body\": \"${description}\",
              \"head\": \"${bname}\",
              \"base\": \"${default_branch}\"
            }"

            curl --location "https://api.github.com/repos/${repo}/pulls" \
              --header "Authorization: Bearer ${token}" \
              --header "Accept: application/vnd.github+json" \
              --header "X-GitHub-Api-Version: 2022-11-28" \
              --header "Content-Type: application/json" \
              --data "{
                \"title\": \"Create ${name}\",
                \"body\": \"${description}\",
                \"head\": \"${bname}\",
                \"base\": \"${default_branch}\"
              }"
         fi

      - name: Run after actions
        env:
          EXECUTION_ID: ${{ fromJson(inputs.api_inputs).execution_id }}
          CREATE_NAME: ${{ fromJson(inputs.api_inputs).create_name }}
          CREATE_DESCRIPTION: ${{ fromJson(inputs.api_inputs).create_description }}
          TOKEN: ${{ fromJson(secrets.secrets).scm_token }}
          GITHUB_ORG: ${{ fromJson(inputs.config).github_org }}
        run: |
          after_actions_raw=$(echo '${{ inputs.api_inputs }}' | jq -r .after_actions)
          echo "after_actions_raw:"
          echo $after_actions_raw
          echo "------------------||------------------"

          after_actions=$(echo "[]" | jq ". + $after_actions_raw")
          echo "after_actions:"
          echo $after_actions
          echo "------------------||------------------"
          
          $STK run actions --actions "$after_actions" --when after --execution-id $EXECUTION_ID
      
      - name: Commit and Push.
        working-directory: user_repo
        run: |
         if [[ `git status --porcelain` ]]; then
            branch=$(git symbolic-ref --short HEAD)
            echo $branch
            echo "------------------||------------------"

            git add -A
            git commit -am "stackspot commit after actions"
            git push origin $branch
         fi

      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*
