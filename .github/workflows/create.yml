name: Create
run-name: ${{ inputs.correlation_id }}
on: 
  workflow_call:
    inputs:
      correlation_id:
        description: Correlation id
        type: string
        required: true
      create:
        description: Json objet with create data
        type: string
        required: true
      create_type:
        description: type
        type: string
        required: true
      cli_login:
        description: CLI login info (json)
        type: string
        required: true
      workspace_slug:
        description: Workspace name
        type: string
        required: true
      actions:
        description: Actions (json)
        type: string
        required: false
      github_org:
        description: GitHub organization value (name)
        type: string
        required: true
      runner:
        description: Runner name
        type: string
        default: ubuntu-latest
        required: false
      config:
        description: Extra config (json)
        type: string
        required: false
        default: "{\"default_branch\": \"main\", \"debug\": true, \"stk\": \"stk-beta\", \"origin_repository\": \"stack-spot/stackspot-workflows-action\", \"origin_branch\": \"main\"}"
    secrets:
        cli:
          description: CLI secret login
          required: true
        git:
          description: PAT secret git
          required: true

jobs:
  validate-inputs:

    name: Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Debug inputs
        if: ${{ fromJson(inputs.config).debug }}
        run: |
          echo "create: ${{ inputs.create }}"
          echo "runner: ${{ inputs.runner }}"
          echo "cli_login: ${{ inputs.cli_login }}"
          echo "workspace_slug: ${{ inputs.workspace_slug }}"
          echo "actions: ${{ inputs.actions }}"
          echo "config: ${{ inputs.config }}"
      - name: "Validate Input: 'create.name'"
        if: fromJson(inputs.create).name == ''
        run: |
         echo "ERROR: 'name' field not found in json for 'create' input"
         exit 1
      - name: "Validate Input: 'create.description'"
        if: fromJson(inputs.create).description == ''
        run: |
         echo "ERROR: 'description' field not found in json for 'create' input"
         exit 1
      - name: "Validate Input: 'create.starter' or 'create.stack' is defined"
        if: ${{ (fromJson(inputs.create).starter == '') && (fromJson(inputs.create).stack == '') }}
        run: |
         echo "ERROR: 'starter' and 'stack' field not found in json for 'create' input"
         exit 1
      - name: "Validate Input: 'cli_login.realm'"
        if: fromJson(inputs.cli_login).realm == ''
        run: |
         echo "ERROR: 'realm' field not found in json for 'cli_login' input"
         exit 1
      - name: "Validate Input: 'cli_login.email'"
        if: fromJson(inputs.cli_login).email == ''
        run: |
         echo "ERROR: 'email' field not found in json for 'cli_login' input"
         exit 1
      - name: "Validate Input: 'config.email'"
        if: fromJson(inputs.config).default_branch == ''
        run: |
         echo "ERROR: 'default_branch' field not found in json for 'config' input"
         exit 1
      - name: "Validate Input: 'config.debug'"
        if: fromJson(inputs.config).debug == ''
        run: |
         echo "ERROR: 'debug' field not found in json for 'config' input"
         exit 1
      - name: "Validate Input: 'config.stk'"
        if: fromJson(inputs.config).stk == ''
        run: |
         echo "ERROR: 'stk' field not found in json for 'config' input"
         exit 1
      - name: "Validate Input: 'config.origin_repository'"
        if: fromJson(inputs.config).origin_repository == ''
        run: |
         echo "ERROR: 'origin_repository' field not found in json for 'config' input"
         exit 1
      - name: "Validate Input: 'config.origin_branch'"
        if: fromJson(inputs.config).origin_branch == ''
        run: |
         echo "ERROR: 'origin_branch' field not found in json for 'config' input"
         exit 1


  use-workspace:
    name: Use Workspace
    runs-on: ${{ inputs.runner }}
    needs: validate-inputs
    env: 
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}   
          token: ${{ secrets.git }}
      - name: Cache
        uses: ./github-actions/restore-stk-cache
        with: 
          stk: ${{ env.STK }}
      - name: Install STK
        uses: ./github-actions/install-stk-cli
        with: 
          stk: ${{ env.STK }}
      - name: Login STK
        uses: ./github-actions/login-stk
        with: 
          stk: ${{ env.STK }}
          email: ${{ fromJson(inputs.cli_login).email }}
          pat: ${{ secrets.cli }}
          realm: ${{ fromJson(inputs.cli_login).realm }}
      - name: Use Workspace
        run: |
          $STK use workspace ${{ inputs.workspace_slug }}
      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  run-before-actions:
    name: Run before actions
    runs-on: ${{ inputs.runner }}
    if: toJson(fromJson(inputs.actions).before) != '[]'
    needs: use-workspace
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ secrets.git }}
      - name: Restore STK Cache
        uses: ./github-actions/restore-stk-cache
        with: 
          stk: ${{ env.STK }}
      - name: Run actions before
        uses: ./github-actions/run-actions
        with:
          actions: ${{ toJson(fromJson(inputs.actions).before) }}
          stk: ${{ env.STK }}
          github_org: ${{ inputs.github_org }}
          secret_git_token: ${{ secrets.git }}
          name: ${{ fromJson(inputs.create).name }}
          description: ${{ fromJson(inputs.create).description }}
          debug: ${{ env.DEBUG }}
      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  create:
    name: Create ${{ inputs.create_type}}
    runs-on: ${{ inputs.runner }}
    needs: [use-workspace, run-before-actions, validate-inputs]
    if: |
      always() &&
      needs.use-workspace.result == 'success' &&
      (needs.run-before-actions.result == 'success' || needs.run-before-actions.result == 'skipped')
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ secrets.git }}
      - name: Checkout the user repo
        id: checkout_user_repo
        uses:  ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ inputs.github_org }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
          app_name: ${{ fromJson(inputs.create).name }}
          path: user_repo
          secret_git_token: ${{ secrets.git }}
          github_url: ${{ fromJson(inputs.create).repo }}
      - name: Restore STK Cache
        uses: ./workflow_repo/github-actions/restore-stk-cache 
        with: 
          stk: ${{ env.STK }}
      - name: Set git username
        run: |
          git config --global user.email "${{ fromJson(inputs.cli_login).email }}"
          git config --global user.name "${{ fromJson(inputs.cli_login).email }}"
      - name: Create ${{ inputs.create_type}}
        env: 
          NAME: ${{ fromJson(inputs.create).name }}
          INPUTS: ${{ toJson(fromJson(inputs.create).inputs) }}
          CI: ${{ toJson(fromJson(inputs.create).connectors) }}
          DESCRIPTION: ${{ fromJson(inputs.create).description }}
          S: ${{ fromJson(inputs.create).stack }}${{ fromJson(inputs.create).starter }}
          PLUGINS: ${{ fromJson(inputs.create).plugins }}
        working-directory: user_repo
        run: |
          source ../workflow_repo/.github/workflows/scripts/enable_colors.sh
          if $DEBUG
          then
            export APPLY_PLUGIN_ENABLE_DEBUG=true
            export COMMAND_ARGS_ENABLE_DEBUG=true
          fi

          conn=""
          connPrint=""
          if [ "${CI}" != "null" ]; then 
             conn="--connection-interfaces $(echo $CI | jq . -c)"
             connPrint=" --connection-interfaces '$(echo $CI | jq )'" 
          fi

          inputsValue="{}"
          inputsPrint=""
          if [ "${INPUTS}" != "null" ]; then 
             inputsValue=$(echo $INPUTS | jq . -c)
             inputsPrint="--inputs-json '$(echo $INPUTS | jq )'" 
          fi

          starter_stack="--starter $S"
          if [ "${{ inputs.create_type}}" == "infra" ]; then 
            starter_stack="--stack $S"
          fi

          plugins=""
          if [ "${{ inputs.create_type}}" == "infra" ]; then 
            plugins="--plugins $PLUGINS"
          fi

          echo -e "\n${green}âš¡ Running create ${{ inputs.create_type}}: ${u_cyan}$NAME"
          echo -e "$STK create ${{ inputs.create_type}} $NAME $starter_stack $plugins $connPrint --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description '$DESCRIPTION' $inputsPrint --non-interactive\n" 

          $STK create ${{ inputs.create_type}} $NAME $starter_stack $plugins $conn --remote https://github.com/${{ steps.checkout_user_repo.outputs.repo }} --description "$DESCRIPTION" --inputs-json "$inputsValue" --non-interactive
      - name: Register ${{ inputs.create_type}}
        working-directory: user_repo
        run: |
         cd ${{ fromJson(inputs.create).name }}
         $STK register ${{ inputs.create_type}}
      - name: Commit and Push.
        working-directory: user_repo
        run: |
         if [[ `git status --porcelain` ]]; then
            git checkout -b stackspot-$(date +%s)
            rm -rf ${{ fromJson(inputs.create).name }}/.git
            cp -r ${{ fromJson(inputs.create).name }}/. .
            rm -fr ${{ fromJson(inputs.create).name }}
            git add -A
            git commit -am "stackspot initial commit"
            git push
         fi
      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*

  run-after-actions:
    name: Run after actions
    runs-on: ${{ inputs.runner }}
    needs: create
    if: toJson(fromJson(inputs.actions).after) != '[]'
    env:
      DEBUG: ${{ fromJson(inputs.config).debug }}
      STK: ${{ fromJson(inputs.config).stk }}
    steps:
      - name: Checkout workflows repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          path: workflow_repo
          repository: ${{ fromJson(inputs.config).origin_repository }}
          ref: ${{ fromJson(inputs.config).origin_branch }}
          token: ${{ secrets.git }}
      - name: Checkout the user repo
        id: checkout_user_repo
        uses:  ./workflow_repo/github-actions/clone-external-repo
        with:
          github_org: ${{ inputs.github_org }}
          app_name: ${{ fromJson(inputs.create).name }}
          path: user_repo
          secret_git_token: ${{ secrets.git }}
          github_url: ${{ fromJson(inputs.create).repo }}
      - name: Restore STK Cache
        uses: ./workflow_repo/github-actions/restore-stk-cache 
        with: 
          stk: ${{ env.STK }}
      - name: Run actions after
        uses: ./workflow_repo/github-actions/run-actions
        with:
          actions: ${{ toJson(fromJson(inputs.actions).after) }}
          stk: ${{ env.STK }}
          github_org: ${{ inputs.github_org }}
          secret_git_token: ${{ secrets.git }}
          name: ${{ fromJson(inputs.create).name }}
          description: ${{ fromJson(inputs.create).description }}
          debug: ${{ env.DEBUG }}
      - name: Commit and Push.
        working-directory: user_repo
        run: |
         if [[ `git status --porcelain` ]]; then
            git add -A
            git commit -am "stackspot commit after actions"
            git push
         fi
      - name: Create Pull Request
        env:
          name: ${{ fromJson(inputs.create).name }}
          description: ${{ fromJson(inputs.create).description }}
          token: ${{ secrets.git }}
          default_branch: ${{ fromJson(inputs.config).default_branch }}
        run: |
          branch=$(git symbolic-ref --short HEAD)
          curl --location 'https://api.github.com/${{ steps.checkout_user_repo.outputs.repo }}/pulls'\
            --header 'Authorization: Bearer ${token}' \
            --header 'Accept: application/vnd.github+json' \
            --header 'X-GitHub-Api-Version: 2022-11-28' \
            --header 'Content-Type: application/json' \
            --data '{
              "title": "Create ${name}",
              "body": "${description}",
              "head": "$branch",
              "base": "${default_branch}"
            }'
      - name: Show Error Log
        if: failure()
        run: |
          cat ~/.$STK/logs/*
