parameters:
  - name: correlation_id
    displayName: Correlation id
    type: string
  - name: workspace_slug
    displayName: Workspace
    type: string
  - name: action
    displayName: Action (json)
    type: string
  - name: cli_login
    displayName: CLI login (json)
    type: string
  - name: config
    displayName: Extra config (json)
    type: string
    default: "{ \"debug\": false, \"stk\": \"stk-beta\"}"

steps:
- bash: |
    ##VARIABLES
    CI=true
    echo "##vso[task.setvariable variable=CI;]$CI"

    # config
    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    [ "$debug" = "" ] && debug="false"
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    [ "$stk" = "" ] && stk="stk-beta"
    echo "##vso[task.setvariable variable=stk;]$stk"

    # cli_login
    email=$(echo '${{ parameters.cli_login }}' | jq -cr '.email // empty')
    echo "##vso[task.setvariable variable=email;]$email"

    realm=$(echo '${{ parameters.cli_login }}' | jq -cr '.realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"

    # ##VALIDATIONS

    # cli_login
    
    [ "$realm" = "" ] && echo "ERROR: 'realm' field not found in json for 'cli_login' input" >&2
    # [ "$email" = "" ] && echo "ERROR: 'email' field not found in json for 'cli_login' input" >&2

    # action
    # action_name=$(echo '${{ parameters.action }}' | jq -r '.name')
    # [ "$action_name" = "null" ] && echo echo "ERROR: 'name' field not found in json for 'action' input" >&2
  failOnStderr: true
  displayName: Validate inputs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) use workspace ${{ parameters.workspace_slug }}"
    $(stk) use workspace "${{ parameters.workspace_slug }}"
  displayName: Use workspace ${{ parameters.workspace_slug }}

- bash: |
    #colors
    u_cyan='\033[4;36m'
    green='\033[0;32m'
    
    if $(DEBUG)
    then
      export APPLY_PLUGIN_ENABLE_DEBUG=true
      export COMMAND_ARGS_ENABLE_DEBUG=true
    fi

    conn=$(echo '${{ parameters.action }}' | jq '.connectors')
    if [ "$conn" != "null" ]; then 
        connPrint=$(echo " -ci '$conn'")
        conn=$(echo $conn | jq -c)
        conn=$(echo " -ci $conn")
    fi

    env=$(echo '${{ parameters.action }}' | jq -r '.env')
    if [ "$env" != "null" ]; then
      env=$(echo " --env $env")
    fi

    inputs=$(echo '${{ parameters.action }}' | jq '.inputs')
    if [ "$inputs" != "null" ]; then 
        inputsPrint=$(echo " --inputs-json '$inputs'")
        inputs=$(echo $inputs | jq -c)
        inputs=$(echo " --inputs-json $inputs")
    fi
    name=$(echo '${{ parameters.action }}' | jq -r '.name')
    echo -e "\n${green}âš¡ Running Action: ${u_cyan}$name"
    echo -e "$(stk) run action $name $env $inputsPrint $connPrint\n" 
    $(stk) run action $name $env $inputs $conn
  displayName: Run action
- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()