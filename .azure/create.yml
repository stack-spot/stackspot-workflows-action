parameters:
  - name: api_inputs
    displayName: Inputs from API (json)
    type: string
  - name: config
    displayName: Inputs from user workflow (json)
    type: string

steps:
- bash: |
    i=0
    sensitive=$(echo '${{ parameters.api_inputs }}' | jq -cr '.sensitive' | jq -r '.[]')
    for s in $sensitive; do
      i=$((i+1))
      echo "##vso[task.setvariable variable=secret$i;issecret=true]${s}"
    done
    
    ##VARIABLES
    CI=true
    echo "##vso[task.setvariable variable=CI;]$CI"

    # git_org
    org_url=$(echo $(System.CollectionUri) | sed 's/.$//')
    git_org=${org_url##*/}
    echo "##vso[task.setvariable variable=git_org;]$git_org"

    # config
    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    [ "$debug" = "" ] && debug="false"
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
    echo "Parsed debug: $debug"
    export HTTP_ENABLE_DEBUG=$debug
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    [ "$stk" = "" ] && stk="stk-beta"
    echo "##vso[task.setvariable variable=stk;]$stk"
    echo "Parsed stk: $stk"

    default_branch=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    echo "##vso[task.setvariable variable=default_branch;]$default_branch"

    branch_name=stackspot-$(date +%s)
    echo "##vso[task.setvariable variable=branch_name;issecret=false]$branch_name"
    
    # inputs
    email=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_email // empty')
    echo "##vso[task.setvariable variable=email;]$email"
    echo "Parsed email: $email"

    realm=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"
    echo "Parsed realm: $realm"

    create_entity_type=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_entity_type // empty')
    echo "##vso[task.setvariable variable=create_entity_type;]$create_entity_type"
    echo "Parsed create_entity_type: $create_entity_type"

    register_id=$(echo '${{ parameters.api_inputs }}' | jq -cr '.register_id')
    echo "##vso[task.setvariable variable=register_id;]$register_id"
    echo "Parsed register_id: $register_id"

    workspace_slug=$(echo '${{ parameters.api_inputs }}' | jq -cr '.workspace_slug // empty')
    echo "##vso[task.setvariable variable=workspace_slug;]$workspace_slug"
    echo "Parsed workspace_slug: $workspace_slug"
    
    create_name=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_name // empty')
    echo "##vso[task.setvariable variable=create_name;]$create_name"
    echo "Parsed create_name: $create_name"

    create_repo=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_repo // empty')
    echo "##vso[task.setvariable variable=create_repo;]$create_repo"
    echo "Parsed create_repo: $create_repo"

    execution_id=$(echo '${{ parameters.api_inputs }}' | jq -cr '.execution_id // empty')
    echo "##vso[task.setvariable variable=execution_id;]$execution_id"
    echo "Parsed execution_id: $execution_id"

    # commands
    use_workspace_cmd=$(echo '${{ parameters.api_inputs }}' | jq -cr '.use_workspace_cmd' | base64 --decode)
    echo "##vso[task.setvariable variable=use_workspace_cmd;]$use_workspace_cmd"
    echo "Parsed use_workspace_cmd: $use_workspace_cmd"

    run_actions_before_cmd=$(echo '${{ parameters.api_inputs }}' | jq -cr '.run_actions_before_cmd' | base64 --decode)
    echo "##vso[task.setvariable variable=run_actions_before_cmd;]$run_actions_before_cmd"
    echo "Parsed run_actions_before_cmd: $run_actions_before_cmd"

    create_cmd=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_cmd' | base64 --decode)
    echo "##vso[task.setvariable variable=create_cmd;]$create_cmd"
    echo "Parsed create_cmd: $create_cmd"

    update_cmd=$(echo '${{ parameters.api_inputs }}' | jq -cr '.update_cmd' | base64 --decode)
    echo "##vso[task.setvariable variable=update_cmd;]$update_cmd"
    echo "Parsed update_cmd: $update_cmd"

    run_actions_after_cmd=$(echo '${{ parameters.api_inputs }}' | jq -cr '.run_actions_after_cmd' | base64 --decode)
    echo "##vso[task.setvariable variable=run_actions_after_cmd;]$run_actions_after_cmd"
    echo "Parsed run_actions_after_cmd: $run_actions_after_cmd"

    ## GIT CONFIG
    git config --global user.email $email
    git config --global user.name $email

  failOnStderr: true
  displayName: Validate inputs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) $(use_workspace_cmd)"
    $(stk) $(use_workspace_cmd)
  displayName: Use workspace

- bash: |
    echo "$(stk) $(run_actions_before_cmd)"
    $(stk) $(run_actions_before_cmd)
  displayName: Run before actions
  
- template: templates/checkout-repo.yml
  parameters:
    path: user_repo

- bash: |
    (echo '${{ parameters.api_inputs }}' | jq -cr '.create_file'| base64 --decode) > create_file.yml
    cat create_file.yml
    echo "$(stk) $(create_cmd) --spec create_file.yml"
    $(stk) $(create_cmd) --spec create_file.yml
    rm -f create_file.yml
  workingDirectory: user_repo
  displayName: Create

- bash: |
    cd $(create_name)
    echo "$(stk) $(update_cmd)"
    $(stk) $(update_cmd)
  failOnStderr: true
  workingDirectory: user_repo
  displayName: Update

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      rm -rf $(create_name)/.git
      cp -r $(create_name)/. .
      rm -rf $(create_name)
      git add -A
      git commit -am "stackspot initial commit"
      git -c http.extraHeader="$(git_header)" push --set-upstream --force origin $(branch_name)

      azure_repo='$(create_repo)'
      org=$(echo $azure_repo | cut -d '/' -f 4)
      project=$(echo $azure_repo | cut -d '/' -f 5)
      repo_name=$(echo $azure_repo | cut -d '/' -f 7)

      curl --location "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0" \
      --header 'Content-Type: application/json' \
      --header "$(git_header)" \
      --data '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(create_name)",
        "description": "Stackspot pr of create $(create_entity_type) $(create_name)"
      }'
    fi
  workingDirectory: user_repo
  failOnStderr: false
  displayName: Commit and push

- bash: |
    echo "$(stk) $(run_actions_after_cmd)"
    $(stk) $(run_actions_after_cmd)
  displayName: Run after actions

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      git add -A
      git commit -am "Stackspot commit after actions"
      git -c http.extraHeader="$(git_header)" push origin $(branch_name)
    fi
  workingDirectory: user_repo
  failOnStderr: false
  displayName: Commit and push

- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()