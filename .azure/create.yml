parameters:
  - name: correlation_id
    displayName: Correlation id
    type: string
  - name: create
    displayName: Json objet with create data
    type: string
  - name: create_type
    displayName: type
    type: string
  - name: cli_login
    displayName: CLI login (json)
    type: string
  - name: workspace_slug
    displayName: Workspace name
    type: string
  - name: actions
    displayName: Actions (json)
    type: string
  - name: config
    displayName: Extra config (json)
    type: string
    default: "{\"default_branch\": \"main\", \"debug\": false, \"stk\": \"stk-beta\"}"

steps:
- bash: |
    ##VARIABLES
    CI=true
    echo "##vso[task.setvariable variable=CI;]$CI"

    # git_org
    org_url=$(echo $(System.CollectionUri) | sed 's/.$//')
    git_org=${org_url##*/}
    echo "##vso[task.setvariable variable=git_org;]$git_org"

    # config
    workflow_api=$(echo '${{ parameters.config }}' | jq -cr '.workflow_api // empty')
    [ "$workflow_api" = "" ] && workflow_api="https://workflow-api.v1.stackspot.com"
    echo "##vso[task.setvariable variable=workflow_api;]$workflow_api"

    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    [ "$debug" = "" ] && debug="false"
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    [ "$stk" = "" ] && stk="stk-beta"
    echo "##vso[task.setvariable variable=stk;]$stk"

    default_branch=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    echo "##vso[task.setvariable variable=default_branch;]$default_branch"

    branch_name=stackspot-$(date +%s)
    echo "##vso[task.setvariable variable=branch_name;issecret=false]$branch_name"

    # cli_login
    email=$(echo '${{ parameters.cli_login }}' | jq -cr '.email // empty')
    echo "##vso[task.setvariable variable=email;]$email"

    realm=$(echo '${{ parameters.cli_login }}' | jq -cr '.realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"

    # create
    create_name=$(echo '${{ parameters.create }}' | jq -cr '.name // empty')
    echo "##vso[task.setvariable variable=create_name;]$create_name"

    create_description=$(echo '${{ parameters.create }}' | jq -cr '.description // empty')
    echo "##vso[task.setvariable variable=create_description;]$create_description"

    create_inputs=$(echo '${{ parameters.create }}' | jq -cr '.inputs // empty')
    echo "##vso[task.setvariable variable=create_inputs;]$create_inputs"

    create_connectors=$(echo '${{ parameters.create }}' | jq -cr '.connectors // empty')
    echo "##vso[task.setvariable variable=create_connectors;]$create_connectors"

    create_starter=$(echo '${{ parameters.create }}' | jq -cr '.starter // empty')
    echo "##vso[task.setvariable variable=create_starter;]$create_starter"

    create_stack=$(echo '${{ parameters.create }}' | jq -cr '.stack // empty')
    echo "##vso[task.setvariable variable=create_stack;]$create_stack"

    create_repo=$(echo '${{ parameters.create }}' | jq -cr '.repo // empty')
    echo "##vso[task.setvariable variable=create_repo;]$create_repo"

    # actions
    actions_before=$(echo '${{ parameters.actions }}' | jq -cr '.before')
    echo "##vso[task.setvariable variable=actions_before;]$actions_before"

    actions_after=$(echo '${{ parameters.actions }}' | jq -cr '.after')
    echo "##vso[task.setvariable variable=actions_after;]$actions_after"

    ##VALIDATIONS

    # create
    [ "$create_name" = "" ] && echo "ERROR: 'name' field not found in json for 'create' input" >&2
    [ "$create_description" = "" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_description" = "" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_starter" = "" ] && [ "$create_stack" = "" ] && echo "ERROR: 'starter' and 'stack' field not found in json for 'create' input" >&2

    # cli_login
    [ "$realm" = "" ] && echo "ERROR: 'realm' field not found in json for 'cli_login' input" >&2
    [ "$email" = "" ] && echo "ERROR: 'email' field not found in json for 'cli_login' input" >&2

    # config
    [ "$default_branch" = "" ] && echo "ERROR: 'default_branch' field not found in json for 'config' input" >&2
    [ "$debug" = "" ] && echo echo "ERROR: 'debug' field not found in json for 'config' input" >&2
    [ "$stk" = "" ] && echo echo "ERROR: 'stk' field not found in json for 'config' input" >&2

    ## GIT CONFIG
    git config --global user.email $email
    git config --global user.name $email

  failOnStderr: true
  displayName: Validate inputs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) use workspace ${{ parameters.workspace_slug }}"
    $(stk) use workspace "${{ parameters.workspace_slug }}"
  displayName: Use workspace ${{ parameters.workspace_slug }}

- template: templates/run-actions.yml
  parameters:
    actions: $(actions_before)
    git_org: $(git_org)
    time: before
  
- template: templates/checkout-repo.yml
  parameters:
    path: user_repo

- bash: |    
    #colors
    u_cyan='\033[4;36m'
    green='\033[0;32m'     

    if $(DEBUG)
    then
      export APPLY_PLUGIN_ENABLE_DEBUG=true
      export COMMAND_ARGS_ENABLE_DEBUG=true
    fi

    conn=""
    connPrint=""
    if [ '$(create_connectors)' != '' ]; then 
        conn="--connection-interfaces $(echo '$(create_connectors)' | jq . -c)"
        connPrint="--connection-interfaces '$(echo '$(create_connectors)' | jq )'" 
    fi

    inputsValue="{}"
    inputsPrint=""
    if [ '$(create_inputs)' != '' ]; then 
        inputsValue=$(echo '$(create_inputs)' | jq . -c)
        inputsPrint="--inputs-json '$(echo '$(create_inputs)' | jq )'" 
    fi

    starter_stack="--starter $(create_starter)"
    if [ '${{ parameters.create_type }}' == 'infra' ]; then 
      starter_stack="--stack $(create_stack)"
    fi

    echo -e "\n${green}âš¡ Running create ${{ parameters.create_type }} - ${u_cyan}$(create_name)"
    echo -e "$(stk) create ${{ parameters.create_type }} $(create_name) $starter_stack $connPrint --remote '$(create_repo)' --description '$(create_description)' $inputsPrint --non-interactive\n" 

    $(stk) create ${{ parameters.create_type }} $(create_name) $starter_stack $conn --remote "$(create_repo)" --description "$(create_description)" --inputs-json "$inputsValue" --non-interactive
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Create ${{ parameters.create_type}}

- bash: |
    cd $(create_name)
    export HTTP_ENABLE_DEBUG=true
    $(stk) register ${{ parameters.create_type}}
          
    type="app-id:"
    if [ "${{ parameters.create_type}}" == "infra" ]; then 
      type="infra-id:"
    fi

    register_id=$(cat .stk/stk.yaml | grep $type | cut -d : -f 2 | tr -d '[:space:]')
    account_slug=$(echo '${{parameters.correlation_id}}' | cut -d "|" -f 1)
    execution_id=$(echo '${{parameters.correlation_id}}' | cut -d "|" -f 2)

    echo "$(workflow_api)/accounts/$account_slug/executions/$execution_id"
    echo "{
        \"register_id\": \"$register_id\"
    }"

    curl --silent --location --request PUT "$(workflow_api)/accounts/$account_slug/executions/$execution_id" \
    --header "Authorization: $(secret_stk_login)" \
    --header "Content-Type: application/json" \
    --data-raw "{
        \"register_id\": \"$register_id\"
    }"
  failOnStderr: true
  workingDirectory: user_repo
  displayName: Register ${{ parameters.create_type}}

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      rm -rf $(create_name)/.git
      cp -r $(create_name)/. .
      rm -rf $(create_name)
      git add -A
      git commit -am "stackspot initial commit"
      git -c http.extraHeader="$(git_header)" push --set-upstream --force origin $(branch_name)

      azure_repo='$(create_repo)'
      org=$(echo $azure_repo | cut -d '/' -f 4)
      project=$(echo $azure_repo | cut -d '/' -f 5)
      repo_name=$(echo $azure_repo | cut -d '/' -f 7)

      echo "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0"
      echo '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(create_name)",
        "description": "$(create_description)"
      }'

      curl --location "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0" \
      --header 'Content-Type: application/json' \
      --header "$(git_header)" \
      --data '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(create_name)",
        "description": "$(create_description)"
      }'
    fi
  workingDirectory: user_repo
  failOnStderr: false
  displayName: Commit and push

- template: templates/run-actions.yml
  parameters:
    actions: $(actions_after)
    git_org: $(git_org)
    time: after

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      git add -A
      git commit -am "stackspot commit after actions"
      git -c http.extraHeader="$(git_header)" push origin $(branch_name)
    fi
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Commit and push

- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()