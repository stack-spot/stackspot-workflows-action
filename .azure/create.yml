parameters:
  - name: api_inputs
    displayName: Inputs from API (json)
    type: string
  - name: config
    displayName: Inputs from user workflow (json)
    type: string

steps:
- bash: |
    ##VARIABLES
    CI=true
    echo "##vso[task.setvariable variable=CI;]$CI"

    # git_org
    org_url=$(echo $(System.CollectionUri) | sed 's/.$//')
    git_org=${org_url##*/}
    echo "##vso[task.setvariable variable=git_org;]$git_org"

    # config
    workflow_api=$(echo '${{ parameters.config }}' | jq -cr '.workflow_api // empty')
    [ "$workflow_api" = "" ] && workflow_api="https://workflow-api.v1.stackspot.com"
    echo "##vso[task.setvariable variable=workflow_api;]$workflow_api"
    echo "Parsed workflow api: $workflow_api"

    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    [ "$debug" = "" ] && debug="false"
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
    echo "Parsed debug: $debug"
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    [ "$stk" = "" ] && stk="stk-beta"
    echo "##vso[task.setvariable variable=stk;]$stk"
    echo "Parsed stk: $stk"

    default_branch=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    echo "##vso[task.setvariable variable=default_branch;]$default_branch"

    branch_name=stackspot-$(date +%s)
    echo "##vso[task.setvariable variable=branch_name;issecret=false]$branch_name"
    
    # cli_login
    email=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_email // empty')
    echo "##vso[task.setvariable variable=email;]$email"
    echo "Parsed email: $email"

    realm=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"
    echo "Parsed realm: $realm"

    # create
    plugins=$(echo '${{ parameters.api_inputs }}' | jq -cr '.plugins')
    echo "##vso[task.setvariable variable=plugins;]$plugins"
    echo "Parsed create_entity_type: $plugins"

    create_entity_type=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_entity_type // empty')
    echo "##vso[task.setvariable variable=create_entity_type;]$create_entity_type"
    echo "Parsed create_entity_type: $create_entity_type"

    register_id=$(echo '${{ parameters.api_inputs }}' | jq -cr '.register_id')
    echo "##vso[task.setvariable variable=register_id;]$register_id"
    echo "Parsed register_id: $register_id"

    workspace_slug=$(echo '${{ parameters.api_inputs }}' | jq -cr '.workspace_slug // empty')
    echo "##vso[task.setvariable variable=workspace_slug;]$workspace_slug"
    echo "Parsed workspace_slug: $workspace_slug"
    
    create_name=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_name // empty')
    echo "##vso[task.setvariable variable=create_name;]$create_name"
    echo "Parsed create_name: $create_name"

    create_description=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_description // empty')
    echo "##vso[task.setvariable variable=create_description;]$create_description"
    echo "Parsed create_description: $create_description"

    create_inputs=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_inputs // empty')
    echo "##vso[task.setvariable variable=create_inputs;]$create_inputs"
    echo "Parsed create_inputs: $create_inputs"

    create_connectors=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_connectors // empty')
    echo "##vso[task.setvariable variable=create_connectors;]$create_connectors"
    echo "Parsed create_connectors: $create_connectors"

    create_starter=$(echo '${{ parameters.api_inputs }}' | jq -cr '.starter // empty')
    echo "##vso[task.setvariable variable=create_starter;]$create_starter"
    echo "Parsed create_starter: $create_starter"

    create_stack=$(echo '${{ parameters.api_inputs }}' | jq -cr '.stack // empty')
    echo "##vso[task.setvariable variable=create_stack;]$create_stack"
    echo "Parsed create_stack: $create_stack"

    create_repo=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_repo // empty')
    echo "##vso[task.setvariable variable=create_repo;]$create_repo"
    echo "Parsed create_repo: $create_repo"

    execution_id=$(echo '${{ parameters.api_inputs }}' | jq -cr '.execution_id // empty')
    echo "##vso[task.setvariable variable=execution_id;]$execution_id"
    echo "Parsed execution_id: $execution_id"

    # actions
    actions_before=$(echo '${{ parameters.api_inputs }}' | jq -cr '.actions_before')
    echo "##vso[task.setvariable variable=actions_before;]$actions_before"
    echo "Parsed actions_before: $actions_before"

    actions_after=$(echo '${{ parameters.api_inputs }}' | jq -cr '.actions_after')
    echo "##vso[task.setvariable variable=actions_after;]$actions_after"
    echo "Parsed actions_after: $actions_after"

    ##VALIDATIONS

    # create
    [ "$create_name" = "" ] && echo "ERROR: 'name' field not found in json for 'create' input" >&2
    [ "$create_description" = "" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_description" = "" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_starter" = "" ] && [ "$create_stack" = "" ] && echo "ERROR: 'starter' and 'stack' field not found in json for 'create' input" >&2

    # cli_login
    [ "$realm" = "" ] && echo "ERROR: 'realm' field not found in json for 'cli_login' input" >&2
    [ "$email" = "" ] && echo "ERROR: 'email' field not found in json for 'cli_login' input" >&2

    # config
    [ "$default_branch" = "" ] && echo "ERROR: 'default_branch' field not found in json for 'config' input" >&2
    [ "$debug" = "" ] && echo echo "ERROR: 'debug' field not found in json for 'config' input" >&2
    [ "$stk" = "" ] && echo echo "ERROR: 'stk' field not found in json for 'config' input" >&2

    ## GIT CONFIG
    git config --global user.email $email
    git config --global user.name $email

  failOnStderr: true
  displayName: Validate inputs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) use workspace $(workspace_slug)"
    $(stk) use workspace "$(workspace_slug)"
  displayName: Use workspace

- bash: |
    before_actions_raw=$(actions_before)
    before_actions_raw=$(echo "$before_actions_raw" | jq ". + []")
    echo "before_actions_raw:"
    echo $before_actions_raw
    echo "------------------||------------------"
  
    create_repo_action=$(echo '${{ parameters.api_inputs }}' | jq -cr '.create_repo_action')
    echo "create_repo_action:"
    echo $create_repo_action
    echo "------------------||------------------"

    reposi_action="[]"
    if [ -n "$create_repo_action" ] && [ "$create_repo_action" != "null" ]; then
      inputs_repo=$(echo '{"org": "$(git_org)","token": "$(secret_git)", "name": "$(create_name)", "description": "$(create_description)"}')
      echo "inputs_repo:"
      echo $inputs_repo
      echo "------------------||------------------"
    
      action_inputs=$(echo "$create_repo_action" | jq -cr .inputs)
      echo "action_inputs:"
      echo $action_inputs
      echo "------------------||------------------"
    
      merged_inputs=$(echo $action_inputs $inputs_repo | jq -cs add)
      echo "merged_inputs:"
      echo $merged_inputs
      echo "------------------||------------------"
        
      parsed_inputs=$(echo "{ \"inputs\": $merged_inputs }")
      echo "parsed_inputs:"
      echo $parsed_inputs
      echo "------------------||------------------"
    
      reposi_action=$(echo $create_repo_action | jq ". + $parsed_inputs")
      echo "reposi_action:"
      echo $reposi_action
      echo "------------------||------------------"
      reposi_action="[$reposi_action]"
    fi

    before_actions=$(echo $reposi_action | jq ". + $before_actions_raw")
    echo "before_actions:"
    echo $before_actions
    echo "------------------||------------------"
  
    echo "$(stk) run actions --actions $before_actions --when before --execution-id $(execution_id) --skip-validate-existing"
    $(stk) run actions --actions "$before_actions" --when before --execution-id $(execution_id) --skip-validate-existing
  displayName: Run before actions
  
- template: templates/checkout-repo.yml
  parameters:
    path: user_repo

- bash: |    
    #colors
    u_cyan='\033[4;36m'
    green='\033[0;32m'     

    if $(DEBUG)
    then
      export APPLY_PLUGIN_ENABLE_DEBUG=true
      export COMMAND_ARGS_ENABLE_DEBUG=true
    fi

    conn=""
    connPrint=""
    if [ '$(create_connectors)' != '' ]; then 
        conn="--connection-interfaces $(echo '$(create_connectors)' | jq . -c)"
        connPrint="--connection-interfaces '$(echo '$(create_connectors)' | jq )'" 
    fi

    inputsValue="{}"
    inputsPrint=""
    if [ '$(create_inputs)' != '' ]; then 
        inputsValue=$(echo '$(create_inputs)' | jq . -c)
        inputsPrint="--inputs-json '$(echo '$(create_inputs)' | jq )'" 
    fi

    plugins=""
    starter_stack="--starter $(create_starter)"
    if [ '$(create_entity_type)' == 'infra' ]; then 
      starter_stack="--stack $(create_stack)"
      plugins="--plugins $(plugins)"
    fi

    echo -e "\n${green}âš¡ Running create $(create_entity_type) - ${u_cyan}$(create_name)"
    echo -e "$(stk) create $(create_entity_type) $(create_name) $plugins $starter_stack $connPrint --remote '$(create_repo)' --description '$(create_description)' $inputsPrint --non-interactive --skip-validate-existing\n" 

    $(stk) create $(create_entity_type) $(create_name) $plugins $starter_stack $conn --remote "$(create_repo)" --description "$(create_description)" --inputs-json "$inputsValue" --non-interactive --skip-validate-existing
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Create

- bash: |
    cd $(create_name)
    if [ -n "$(register_id)" ] && [ "$(register_id)" != "null" ]; then
      echo "$STK update $(create_entity_type) --id $(register_id)"
      $STK update $(create_entity_type) --id $(register_id)
    fi
  failOnStderr: true
  workingDirectory: user_repo
  displayName: Update

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      rm -rf $(create_name)/.git
      cp -r $(create_name)/. .
      rm -rf $(create_name)
      git add -A
      git commit -am "stackspot initial commit"
      git -c http.extraHeader="$(git_header)" push --set-upstream --force origin $(branch_name)

      azure_repo='$(create_repo)'
      org=$(echo $azure_repo | cut -d '/' -f 4)
      project=$(echo $azure_repo | cut -d '/' -f 5)
      repo_name=$(echo $azure_repo | cut -d '/' -f 7)

      echo "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0"
      echo '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(create_name)",
        "description": "$(create_description)"
      }'

      curl --location "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0" \
      --header 'Content-Type: application/json' \
      --header "$(git_header)" \
      --data '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(create_name)",
        "description": "$(create_description)"
      }'
    fi
  workingDirectory: user_repo
  failOnStderr: false
  displayName: Commit and push

- bash: |
    echo "$(stk) run actions --actions $(actions_after) --when after --execution-id $(execution_id)"
    $(stk) run actions --actions '$(actions_after)' --when after --execution-id $(execution_id)
  displayName: Run after actions

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      git add -A
      git commit -am "stackspot commit after actions"
      git -c http.extraHeader="$(git_header)" push origin $(branch_name)
    fi
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Commit and push

- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()