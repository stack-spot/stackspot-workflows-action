parameters:
  - name: api_inputs
    displayName: Inputs from API (json)
    type: string
  - name: config
    displayName: Inputs from user workflow (json)
    type: string

steps:
- bash: |
    ##VARIABLES
    CI=true
    echo "##vso[task.setvariable variable=CI;]$CI"

    # config
    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    [ "$debug" = "" ] && debug="false"
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
    echo "Parsed debug: $debug"
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    [ "$stk" = "" ] && stk="stk-beta"
    echo "##vso[task.setvariable variable=stk;]$stk"
    echo "Parsed stk: $stk"

    stk=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    default_branch=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    echo "##vso[task.setvariable variable=default_branch;]$default_branch"

    branch_name=stackspot-$(date +%s)
    echo "##vso[task.setvariable variable=branch_name;issecret=false]$branch_name"

    # plugin
    workspace_slug=$(echo '${{ parameters.api_inputs }}' | jq -cr '.workspace_slug // empty')
    echo "##vso[task.setvariable variable=workspace_slug;]$workspace_slug"
    echo "Parsed workspace slug: $workspace_slug"

    repo=$(echo '${{ parameters.api_inputs }}' | jq -cr '.repo // empty')
    echo "##vso[task.setvariable variable=repo;]$repo"
    echo "Parsed repository: $repo"

    plugin_name=$(echo '${{ parameters.api_inputs }}' | jq -cr '.plugin_name // empty')
    echo "##vso[task.setvariable variable=plugin_name;]$plugin_name"
    echo "Parsed plugin name: $plugin_name"

    plugin_inputs=$(echo '${{ parameters.api_inputs }}' | jq -cr '.plugin_inputs // empty')
    echo "##vso[task.setvariable variable=plugin_inputs;]$plugin_inputs"
    echo "Parsed plugin inputs: $plugin_inputs"

    plugin_connectors=$(echo '${{ parameters.api_inputs }}' | jq -cr '.plugin_connectors // empty')
    echo "##vso[task.setvariable variable=plugin_connectors;]$plugin_connectors"
    echo "Parsed plugin connectors: $plugin_connectors"

    create_repo=$(echo '${{ parameters.api_inputs }}' | jq -cr '.repo // empty')
    echo "##vso[task.setvariable variable=create_repo;]$create_repo"

    # cli_login
    email=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_email // empty')
    echo "##vso[task.setvariable variable=email;]$email"
    echo "Parsed email: $email"

    realm=$(echo '${{ parameters.api_inputs }}' | jq -cr '.cli_login_realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"
    echo "Parsed realm: $realm"
  failOnStderr: true
  displayName: Validate inputs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) use workspace $(workspace_slug)"
    $(stk) use workspace "$(workspace_slug)"
  displayName: Use workspace

- template: templates/checkout-repo.yml
  parameters:
    path: user_repo

- bash: |
    #colors
    u_cyan='\033[4;36m'
    green='\033[0;32m'
    
    if $(DEBUG)
    then
      export APPLY_PLUGIN_ENABLE_DEBUG=true
      export COMMAND_ARGS_ENABLE_DEBUG=true
    fi

    inputsValue="{}"
    inputsPrint=""
    if [ '$(plugin_inputs)' != '' ]; then 
        inputsValue=$(echo '$(plugin_inputs)' | jq . -c)
        inputsPrint="--inputs-json '$(echo '$(plugin_inputs)' | jq )'" 
    fi
    
    echo -e "\n${green}âš¡ Applying plugin: ${u_cyan}$(plugin_name)"
    echo -e "$(stk) apply plugin $(plugin_name) $inputsPrint $(plugin_connectors)\n" 
    $(stk) apply plugin $(plugin_name) --inputs-json "$inputsValue" $(plugin_connectors) --skip-warning
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Apply plugin

- bash: |
    if [[ `git status --porcelain` ]]; then
      git checkout -b $(branch_name)
      rm -rf $(plugin_name)/.git
      cp -r $(plugin_name)/. .
      rm -rf $(plugin_name)
      git add -A
      git commit -am "stackspot initial commit"
      git -c http.extraHeader="$(git_header)" push --set-upstream --force origin $(branch_name)

      azure_repo='$(create_repo)'
      org=$(echo $azure_repo | cut -d '/' -f 4)
      project=$(echo $azure_repo | cut -d '/' -f 5)
      repo_name=$(echo $azure_repo | cut -d '/' -f 7)

      echo "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0"
      echo '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "Apply $(plugin_name)",
        "description": "Applying plugin by stackspot"
      }'

      curl --location "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo_name/pullrequests?api-version=7.0" \
      --header 'Content-Type: application/json' \
      --header "$(git_header)" \
      --data '{
        "sourceRefName": "refs/heads/$(branch_name)",
        "targetRefName": "refs/heads/$(default_branch)",
        "title": "$(plugin_name)",
        "description": "Applying plugin by stackspot"
      }'
    fi
  workingDirectory: user_repo
  failOnStderr: false
  displayName: Commit and push

- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()