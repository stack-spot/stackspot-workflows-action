{% set runners %}
{% if use_self_hosted_pool %}
{% set self_hosted_pool_names = self_hosted_pool_name.split(',') %}
{{"\n"}}        runs-on:
{%- for self_hosted_pool_name in self_hosted_pool_names %}
{{"\n"}}          - {{self_hosted_pool_name}}
{%- endfor %}
{% endif %}
{% endset %}
image: atlassian/default-image:3

definitions:
  steps:
    - step: &install-stk-login-use-workspace
        name: 'Install stk, login and use workspace'{{runners}}
        script:
          # ------------------------- CONFIGURE DEBUG -------------------------
          - echo "Step [1/9] Configure DEBUG MODE.";
            if [ $debugHttp == "true" ]; then
              export HTTP_ENABLE_DEBUG=true;
              echo -e "$green DEBUG HTTP MODE ENABLED";
            else
              echo -e "$green DEBUG HTTP MODE DISABLED";
            fi;

          # ------------------------- DOWNLOAD CLI -------------------------
          - echo "Step [2/9] Download CLI";
            curl -O -s https://stk.stackspot.com/installer/linux/$workflow_config;
            chmod +x $workflow_config;

          - echo "Step [3/9] CLI init";
            ./$workflow_config init;
            rm $workflow_config;

          # - Download .env file of QA env when $workflow_config is 'stk-alpha'
          - echo "Step [4/9] Download .env";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/download-qa-env.sh;
            $BITBUCKET_CLONE_DIR/scripts/download-qa-env.sh $debug $workflow_config;
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;

          - echo "Step [5/9] Upgrade CLI";
            ~/.$workflow_config/bin/$workflow_config --version;
            ~/.$workflow_config/bin/$workflow_config upgrade;

          # - Add stk or stk-alpha to PATH environment variable
          - echo "Step [6/9] Add CLI to PATH environment variable";
            export PATH="$PATH:~/.$workflow_config/bin";

          # -------------------- LOGIN AND USE WORKSPACE -------------------
          - echo "Step [7/9] Execute login";
            echo $workflow_config login $(echo $cli_login | jq -r .email) --realm $(echo $cli_login | jq -r .realm);
            $workflow_config login $(echo $cli_login | jq -r .email) --realm $(echo $cli_login | jq -r .realm) --pat $(echo $secrets | jq -r .secret_stk_login);
          
          - echo "Step [8/9] Use workspace";
            echo $workflow_config use workspace $workspace_slug;
            $workflow_config use workspace $workspace_slug

          # -------------- MOVE TO FOLDER TO SAVE AS ARTIFACT --------------
          # - Create .gitkeep inside ~/.$workflow_config/stacks to avoid init execution more than one time
          - echo "Step [9/9] Move to folder '$BITBUCKET_CLONE_DIR' to save as artifact";
            touch ~/.$workflow_config/stacks/.gitkeep;
            rm -rf .$workflow_config;
            cp -rf ~/.$workflow_config .
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config
        artifacts:
          - .stk/**
          - .stk-alpha/**
          - .stk-dev/**

    - step: &run-action-validate-inputs
        name: 'Valdiate JSON Inputs'{{runners}}
        script:
          # Add variable colors
          - echo "Step [1/11] Configure pipeline.";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh

          - echo "Step [2/11] Validating Input secrets";
            if [ -z "$secrets" ]; then
              echo -e "$red✖ ERROR⇾ 'secrets' field not found in json";
              exit 1;
            fi

          - echo "Step [3/11] Validating Input secret_stk_login of secrets";
            pat=$(echo $secrets | jq -r .secret_stk_login);
            if [ -z "$pat" ] || [ "$pat" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'secret_stk_login' field not found in json for 'secrets' input";
              exit 1;
            fi

          - echo "Step [4/11] Validating Input workspace_slug";
            if [ -z "$workspace_slug" ]; then
              echo -e "$red✖ ERROR⇾ 'workspace_slug' field not found in json";
              exit 1;
            fi

          - echo "Step [5/11] Validating Input action";
            if [ -z "$action" ]; then
              echo -e "$red✖ ERROR⇾ 'action' field not found in json";
              exit 1;
            fi

          - echo "Step [6/11] Validating Input name of action";
            action_name=$(echo $action | jq -r .name);
            if [ -z "$action_name" ] || [ "$action_name" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'name' field not found in json for 'action' input";
              exit 1;
            fi

          - echo "Step [7/11] Validating Input name of action";
            env=$(echo $action | jq -r .env);
            if [ -z "$env" ] || [ "$env" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'env' field not found in json for 'action' input";
              exit 1;
            fi

          - echo "Step [8/11] Validating Input cli_login";
            if [ -z "$cli_login" ]; then
              echo -e "$red✖ ERROR⇾ 'cli_login' field not found in json";
              exit 1;
            fi

          - echo "Step [9/11] Validating Input email of cli_login";
            email=$(echo $cli_login | jq -r .email);
            if [ -z "$email" ] || [ "$email" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'email' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo "Step [10/11] Validating Input realm of cli_login";
            realm=$(echo $cli_login | jq -r .realm);
            if [ -z "$realm" ] || [ "$realm" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'realm' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo -e "Step [11/11] $green⚡Validation successfully"

    - step: &run-action
        name: 'Run Action'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/3] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh
          
          - echo "Step [2/3] Parse inputs.";
            action_name=$(echo $action | jq -r .name);
            action_env=$(echo $action | jq -r .env);
            action_inputs="$(echo $action | jq -cM .inputs)";
            action_connection_interfaces=$(echo $action | jq -cM .connectors);

            if [ $debug == "true" ]; then
            
              echo -e "$green➤ DEBUG$two_dots_unicode Action name$two_dots_unicode $u_cyan$action_name";
              
              if [ -z "$action_env" ] || [ "$action_env" == "null" ]; then
                echo -e "$green➤ DEBUG$two_dots_unicode no env found";
              else
                echo -e "$green➤ DEBUG$two_dots_unicode '--env \"$action_env\"'";
              fi;

              if [ -z "$action_inputs" ] || [ "$action_inputs" == "null" ]; then
                  echo -e "$green➤ DEBUG$two_dots_unicode no inputs-json found.";
              else
                  action_inputs_print=$(echo $action_inputs | jq -Rc);
                  echo -e "$green➤ DEBUG$two_dots_unicode '--inputs-json $action_inputs_print'";
              fi;

              if [ -z "$action_connection_interfaces" ] || [ "$action_connection_interfaces" == "null" ]; then
                  echo -e "$green➤ DEBUG$two_dots_unicode no connection-interfaces found";
              else
                  action_connection_interfaces_print=$(echo $action_connection_interfaces | jq -Rc);
                  echo -e "$green➤ DEBUG$two_dots_unicode '--connection-interfaces $action_connection_interfaces_print'";
              fi;
            fi;
          
          - echo "Step [3/3] Run action.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/run-action.sh;
            $BITBUCKET_CLONE_DIR/scripts/run-action.sh $debug $workflow_config "$action_name" "$action_env" "$action_inputs" "$action_connection_interfaces";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config
    
    - step: &create-validate-inputs
        name: 'Validate Inputs'{{runners}}
        script:
          # Add variable colors
          - echo "Step [1/13] Configure pipeline.";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh

          - echo "Step [2/13] Validating Input secrets";
            if [ -z "$secrets" ]; then
              echo -e "$red✖ ERROR⇾ 'secrets' field not found in json";
              exit 1;
            fi

          - echo "Step [3/13] Validating Input secret_stk_login of secrets";
            secret_stk_login=$(echo $secrets | jq -r .secret_stk_login);
            if [ -z "$secret_stk_login" ] || [ "$secret_stk_login" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'secret_stk_login' field not found in json for 'secrets' input";
              exit 1;
            fi

          - echo "Step [4/13] Validating Input secret_git of secrets";
            secret_git=$(echo $secrets | jq -r .secret_git);
            if [ -z "$secret_git" ] || [ "$secret_git" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'secret_git' field not found in json for 'secrets' input";
              exit 1;
            fi

          - echo "Step [5/13] Validating Input workspace_slug";
            if [ -z "$workspace_slug" ]; then
              echo -e "$red✖ ERROR⇾ 'workspace_slug' field not found in json";
              exit 1;
            fi

          - echo "Step [6/13] Validating Input fields";
            if [ -z "$fields" ]; then
              echo -e "$red✖ ERROR⇾ 'fields' field not found in json";
              exit 1;
            fi

          - echo "Step [7/13] Validating Input name of fields";
            name=$(echo $fields | jq -r .name);
            if [ -z "$name" ] || [ "$name" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'name' field not found in json for 'fields' input";
              exit 1;
            fi

          - echo "Step [8/13] Validating Input description of fields";
            description=$(echo $fields | jq -r .description);
            if [ -z "$description" ] || [ "$description" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'description' field not found in json for 'fields' input";
              exit 1;
            fi

          - echo "Step [9/13] Validating Input starter or stack of fields";
            if [ "$create_type" == "app" ]; then
              echo "Validating starter for create app";
              starter_value=$(echo $fields | jq -r .starter);
              if [ -z "$starter_value" ] || [ "$starter_value" == "null" ]; then
                echo -e "$red✖ ERROR⇾ 'starter' field not found in json for 'fields' input";
                exit 1;
              fi;
            else
              echo "Validating starter for create app";
              stack_value=$(echo $fields | jq -r .stack);
              if [ -z "$stack_value" ] || [ "$stack_value" == "null" ]; then
                echo -e "$red✖ ERROR⇾ 'stack' field not found in json for 'fields' input";
                exit 1;
              fi;
            fi;

          - echo "Step [10/13] Validating Input cli_login";
            if [ -z "$cli_login" ]; then
              echo -e "$red✖ ERROR⇾ 'cli_login' field not found in json";
              exit 1;
            fi

          - echo "Step [11/13] Validating Input email of cli_login";
            email=$(echo $cli_login | jq -r .email);
            if [ -z "$email" ] || [ "$email" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'email' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo "Step [12/13] Validating Input realm of cli_login";
            realm=$(echo $cli_login | jq -r .realm);
            if [ -z "$realm" ] || [ "$realm" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'realm' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo -e "Step [13/13] $green⚡Validation successfully"


    - step: &create-register-run-actions
        name: 'Create'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/12] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh

          # ------------------------- PARSE INPUTS -------------------------
          - echo "Step [2/12] Parse inputs of 'create $create_type'.";
            workspace_pat=$(echo $secrets | jq -r .secret_git);
            workspace_name=$BITBUCKET_WORKSPACE;
            name=$(echo $fields | jq -r .name);

            repo_url=$(echo $fields | jq -r .repo);
            repo_name="${repo_url##*/}";
            if [ -z "$repo_name" ] || [ "$repo_name" == "null" ]; then
              repo_name=$name;
            fi;
            email=$(echo $cli_login | jq -r .email);

            description=$(echo $fields | jq -r .description);
            remote_app="https://bitbucket.org/$workspace_name/$repo_name";
            inputs="$(echo $fields | jq -cM .inputs)";
            connection_interfaces=$(echo $fields | jq -cM .connectors);
            plugins=$(echo $fields | jq -r .plugins);

            if [ "$create_type" == "app" ]; then
              starter_stack_option="starter";
              starter_stack_value=$(echo $fields | jq -r .starter);
            else
              starter_stack_option="stack";
              starter_stack_value=$(echo $fields | jq -r .stack);
            fi;
            
            if [ -z "$inputs" ] || [ "$inputs" == "null" ]; then
              inputs="{}";
            fi;

            if [ -z "$connection_interfaces" ] || [ "$connection_interfaces" == "null" ]; then
              connection_interfaces="{}";
            fi;

            if [ -z "$plugins" ] || [ "$plugins" == "null" ]; then
              plugins="";
            fi;

            if [ $debug == "true" ]; then
              echo -e "$green➤ DEBUG$two_dots_unicode Repository URL $repo_url";
              echo -e "$green➤ DEBUG$two_dots_unicode Repository name $repo_name";
              echo -e "$green➤ DEBUG$two_dots_unicode E-mail $email";
              echo -e "$green➤ DEBUG$two_dots_unicode --$starter_stack_option \"$starter_stack_value\"";
              echo -e "$green➤ DEBUG$two_dots_unicode --description \"$description\"";
              echo -e "$green➤ DEBUG$two_dots_unicode --remote \"$remote_app\"";
              echo -e "$green➤ DEBUG$two_dots_unicode --inputs-json \"$inputs\"";
              echo -e "$green➤ DEBUG$two_dots_unicode --connection-interfaces \"$connection_interfaces\"";
              if [ "$create_type" == "infra" ]; then
                echo -e "$green➤ DEBUG$two_dots_unicode --plugins \"$plugins\"";
              fi;
            fi;

            args=();
            args+=("--description" "$(echo $description)");
            args+=("--$starter_stack_option" "$(echo $starter_stack_value)");
            args+=("--remote" "$(echo $remote_app)");
            args+=("--inputs-json" "$(echo $inputs)");
            args+=("--connection-interfaces" "$(echo $connection_interfaces)");
            if [ "$create_type" == 'infra' ]; then
              z="1";
            fi

          # ---------------------- RUN ACTION CREATE REPO ----------------------
          - echo "Step [3/12] Run action create repo.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/run-create-repo-action.sh;
            $BITBUCKET_CLONE_DIR/scripts/run-create-repo-action.sh "$debug" "$workflow_config" "$workspace_pat" "$workspace_name" "$name" "$description" "$create_repo_action"

          # ---------------------- RUN ACTIONS BEFORE ----------------------
          - echo "Step [4/12] Run actions before.";
            actions_before=$(echo $actions | jq -cM .before);
            if [ -n "$actions_before" ]; then
              echo -e "$green➤ DEBUG$two_dots_unicode Actions Before$two_dots_unicode $actions_before";
              echo -e "$green➤ DEBUG$two_dots_unicode Actions Execution Id$two_dots_unicode $execution_id";
              echo -e $yellow $workflow_config run actions -a "$(echo $actions_before)" -e $execution_id -w before"\n";
              $workflow_config run actions -a "$(echo $actions_before)" -e $execution_id -w before;
              exit_code_of_command=$?;
              if [ "$exit_code_of_command" != "0" ]; then
                exit $exit_code_of_command;
              fi
            else
              echo -e "$green➤ DEBUG$two_dots_unicode No Action to run";
            fi

          # ------------------------- CONFIGURE DEBUG -------------------------
          - echo "Step [5/12] Configure DEBUG MODE.";
            if [ $debug == "true" ]; then
              export APPLY_PLUGIN_ENABLE_DEBUG=true;
              export COMMAND_ARGS_ENABLE_DEBUG=true;
              echo -e "$green DEBUG MODE ENABLED";
            else
              echo -e "$green DEBUG MODE DISABLED";
            fi;

            if [ $debugHttp == "true" ]; then
              export HTTP_ENABLE_DEBUG=true;
              echo -e "$green DEBUG HTTP MODE ENABLED";
            else
              echo -e "$green DEBUG HTTP MODE DISABLED";
            fi;

          # ----------------------- CLONE REPOSITORY -----------------------
          - echo "Step [6/12] Clone repository";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh;
            $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh $repo_name $workspace_pat $email $workspace_name "project_cloned";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;
            cd project_cloned;
          
          # ----------------------- CREATE APP/INFRA -----------------------
          - echo "Step [7/12] Create $create_type";
            echo -e "\n$green Creating $create_type $u_cyan$name\n";
            echo -e $yellow $workflow_config create $create_type $name --non-interactive $(echo "${args[@]}") "\n";
            $workflow_config create $create_type $name --skip-validate-existing --non-interactive "${args[@]}";
            echo -e "$green $create_type created successfully\n";
            cd $name;
        
          # ---------------------- UPDATE APP/INFRA ----------------------
          - echo "Step [8/12] Config update $create_type";
            if [ -n "$register_id" ]; then
              $workflow_config update $create_type --id $register_id
              echo -e "$green $create_type updated.\n";
              exit_code_of_command=$?;
              if [ "$exit_code_of_command" != "0" ]; then
                exit $exit_code_of_command;
              fi;
            else
              echo -e "$green register_id not found, not updating $create_type\n";
            fi;

          # ------------------------- COMMIT/PUSH --------------------------
          - echo "Step [9/12] Commit and push";
            echo -e "\n$green Commit and push\n";
            cd ..;
            rm -rf $name/.git;
            cp -r $name/. .;
            rm -fr $name;
            branch_name=stackspot-$(date +%s);
            git checkout -b $branch_name;
            git add -A;
            git commit -am "stackspot initial commit";
            git push origin $branch_name;

          # --------------------- CREATE PULL REQUEST ----------------------
          - echo "Step [10/12] Create pull request";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh;
            $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh $workspace_name $repo_name $workspace_pat $name $branch_name $default_branch "$description";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi

          # ----------------------- RUN ACTIONS AFTER ----------------------
          - echo "Step [11/12] Run actions after";
            actions_after=$(echo $actions | jq -cM .after);
            echo -e "$green➤ DEBUG$two_dots_unicode Actions After$two_dots_unicode $actions_after\n";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/run-actions.sh;
            $BITBUCKET_CLONE_DIR/scripts/run-actions.sh $debug "$BITBUCKET_CLONE_DIR" "$workflow_config" "$actions_after" "$secret_git_token" "$workspace_name" "$name" "$description";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi

          - echo "Step [12/12] Commit and push";
            if [[ `git status --porcelain` ]]; then
              branch=$(git symbolic-ref --short HEAD);
              git add -A;
              git commit -am "stackspot commit after actions";
              git push origin $branch;
            else
              echo "Nothing to commit";
            fi;
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config

    - step: &apply-plugin-validate-inputs
        name: 'Valdiate JSON Inputs'{{runners}}
        script:
          # Add variable colors
          - echo "Step [1/11] Configure pipeline.";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh

          - echo "Step [2/11] Validating Input secrets";
            if [ -z "$secrets" ]; then
              echo -e "$red✖ ERROR⇾ 'secrets' field not found in json";
              exit 1;
            fi

          - echo "Step [3/11] Validating Input secret_stk_login of secrets";
            pat=$(echo $secrets | jq -r .secret_stk_login);
            if [ -z "$pat" ] || [ "$pat" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'secret_stk_login' field not found in json for 'secrets' input";
              exit 1;
            fi

          - echo "Step [4/11] Validating Input workspace_slug";
            if [ -z "$workspace_slug" ]; then
              echo -e "$red✖ ERROR⇾ 'workspace_slug' field not found in json";
              exit 1;
            fi

          - echo "Step [5/11] Validating Input plugin";
            if [ -z "$plugin" ]; then
              echo -e "$red✖ ERROR⇾ 'plugin' field not found in json";
              exit 1;
            fi

          - echo "Step [6/11] Validating Input name of plugin";
            plugin_name=$(echo $plugin | jq -r .name);
            if [ -z "$plugin_name" ] || [ "$plugin_name" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'name' field not found in json for 'plugin' input";
              exit 1;
            fi

          - echo "Step [7/11] Validating Input repo";
            repo=$(echo $plugin | jq -r .repo);
            if [ -z "$repo" ] || [ "$repo" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'repo' field not found in json for 'plugin' input";
              exit 1;
            fi

          - echo "Step [8/11] Validating Input cli_login";
            if [ -z "$cli_login" ]; then
              echo -e "$red✖ ERROR⇾ 'cli_login' field not found in json";
              exit 1;
            fi

          - echo "Step [9/11] Validating Input email of cli_login";
            email=$(echo $cli_login | jq -r .email);
            if [ -z "$email" ] || [ "$email" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'email' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo "Step [10/11] Validating Input realm of cli_login";
            realm=$(echo $cli_login | jq -r .realm);
            if [ -z "$realm" ] || [ "$realm" == "null" ]; then
              echo -e "$red✖ ERROR⇾ 'realm' field not found in json for 'cli_login' input";
              exit 1;
            fi;

          - echo -e "Step [11/11] $green⚡Validation successfully"

    - step: &apply-plugin
        name: 'Apply Plugin'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/6] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh
          
          - echo "Step [2/6] Parse inputs.";
            plugin_name=$(echo $plugin | jq -r .name);
            plugin_inputs="$(echo $plugin | jq -cM .inputs)";
            plugin_connection_interfaces=$(echo $plugin | jq -cM .connectors);
            repo_url=$(echo $plugin | jq -r .repo);
            repo_name="${repo_url##*/}";
            if [ -z "$repo_name" ] || [ "$repo_name" == "null" ]; then
              repo_name=$name;
            fi;
            email=$(echo $cli_login | jq -r .email);
            workspace_pat=$(echo $secrets | jq -r .secret_git);
            workspace_name=$BITBUCKET_WORKSPACE;

            if [ $debug == "true" ]; then
            
              echo -e "$green➤ DEBUG$two_dots_unicode Plugin name$two_dots_unicode $u_cyan$plugin_name";

              echo -e "$green➤ DEBUG$two_dots_unicode Repo url$two_dots_unicode $u_cyan$repo_url";

              echo -e "$green➤ DEBUG$two_dots_unicode Repo name$two_dots_unicode $u_cyan$repo_name";

              if [ -z "$plugin_inputs" ] || [ "$plugin_inputs" == "null" ]; then
                  echo -e "$green➤ DEBUG$two_dots_unicode no inputs-json found.";
              else
                  plugin_inputs_print=$(echo $plugin_inputs | jq -Rc);
                  echo -e "$green➤ DEBUG$two_dots_unicode '--inputs-json $plugin_inputs_print'";
              fi;

              if [ -z "$plugin_connection_interfaces" ] || [ "$plugin_connection_interfaces" == "null" ]; then
                  echo -e "$green➤ DEBUG$two_dots_unicode no connection-interfaces found";
              else
                  plugin_connection_interfaces_print=$(echo $plugin_connection_interfaces | jq -Rc);
                  echo -e "$green➤ DEBUG$two_dots_unicode '--connection-interfaces $plugin_connection_interfaces_print'";
              fi;

            fi;

          # ----------------------- CLONE REPOSITORY -----------------------
          - echo "Step [3/6] Clone repository";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh;
            $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh $repo_name $workspace_pat $email $workspace_name "project_cloned";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;
            cd project_cloned;
          
          # ----------------------- APPLY PLUGIN -----------------------
          - echo "Step [4/6] Apply plugin.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/apply-plugin.sh;
            $BITBUCKET_CLONE_DIR/scripts/apply-plugin.sh $debug $workflow_config "$plugin_name" "$plugin_inputs" "$plugin_connection_interfaces";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
          
          # ------------------------- COMMIT/PUSH --------------------------
          - echo "Step [5/6] Commit and push";
            echo -e "\n$green Commit and push\n";
            branch_name=stackspot-$(date +%s);
            git checkout -b $branch_name;
            git add -A;
            git commit -am "stackspot initial commit";
            git push origin $branch_name;

          # --------------------- CREATE PULL REQUEST ----------------------
          - echo "Step [6/6] Create pull request";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh;
            $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh $workspace_name $repo_name $workspace_pat $plugin_name $branch_name $default_branch "Applying the plugin ${plugin_name}";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config

pipelines:
  custom:
    create-app:
      - variables:
        - name: actions
        - name: fields
        - name: correlation_id
        - name: cli_login
        - name: workspace_slug
        - name: secrets
        - name: execution_id
        - name: register_id
        - name: create_repo_action
        - name: create_type
          default: app
        - name: default_branch
          default: main
      - step: *create-validate-inputs
      - step: *install-stk-login-use-workspace
      - step:
          <<: *create-register-run-actions
          name: 'Create App'
    create-infra:
      - variables:
        - name: actions
        - name: fields
        - name: correlation_id
        - name: cli_login
        - name: workspace_slug
        - name: secrets
        - name: execution_id
        - name: register_id
        - name: create_repo_action
        - name: create_type
          default: infra
        - name: default_branch
          default: main
      - step: *create-validate-inputs
      - step: *install-stk-login-use-workspace
      - step:
          <<: *create-register-run-actions
          name: 'Create Infra'
    run-action:
      - variables:
        - name: actions
        - name: fields
        - name: correlation_id
        - name: cli_login
        - name: workspace_slug
        - name: secrets
        - name: create_type
          default: app
      - step: *run-action-validate-inputs
      - step: *install-stk-login-use-workspace
      - step: *run-action
    apply-plugin:
      - variables:
        - name: plugin
        - name: correlation_id
        - name: cli_login
        - name: workspace_slug
        - name: secrets
        - name: default_branch
          default: main
      - step: *apply-plugin-validate-inputs
      - step: *install-stk-login-use-workspace
      - step: *apply-plugin