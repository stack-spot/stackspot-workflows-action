{% set runners %}
{% if use_self_hosted_pool %}
{% set self_hosted_pool_names = self_hosted_pool_name.split(',') %}
{{"\n"}}        runs-on:
{%- for self_hosted_pool_name in self_hosted_pool_names %}
{{"\n"}}          - {{self_hosted_pool_name}}
{%- endfor %}
{% endif %}
{% endset %}
image: atlassian/default-image:3

definitions:
  steps:
    - step: &install-stk-login-use-workspace
        name: 'Install stk, login and use workspace'{{runners}}
        script:
          # ------------------------- CONFIGURE DEBUG -------------------------
          - echo "Step [1/9] Configure DEBUG MODE.";
            if [ $debug == "true" ]; then
              export HTTP_ENABLE_DEBUG=true;
              echo -e "$green DEBUG HTTP MODE ENABLED";
            else
              echo -e "$green DEBUG HTTP MODE DISABLED";
            fi;

          # ------------------------- DOWNLOAD CLI -------------------------
          - echo "Step [2/9] Download CLI";
            curl -O -s https://stk.stackspot.com/installer/linux/$workflow_config;
            chmod +x $workflow_config;

          - echo "Step [3/9] CLI init";
            ./$workflow_config init;
            rm $workflow_config;

          # - Download .env file of QA env when $workflow_config is 'stk-alpha'
          - echo "Step [4/9] Download .env";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/download-qa-env.sh;
            $BITBUCKET_CLONE_DIR/scripts/download-qa-env.sh $debug $workflow_config;
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;

          - echo "Step [5/9] Upgrade CLI";
            ~/.$workflow_config/bin/$workflow_config --version;
            ~/.$workflow_config/bin/$workflow_config upgrade;

          # - Add stk or stk-alpha to PATH environment variable
          - echo "Step [6/9] Add CLI to PATH environment variable";
            export PATH="$PATH:~/.$workflow_config/bin";

          # -------------------- LOGIN AND USE WORKSPACE -------------------
          - echo "Step [7/9] Execute login";
            echo $workflow_config login $(echo $api_inputs | jq -r .cli_login_email) --realm $(echo $api_inputs | jq -r .cli_login_realm) --pat $(echo $secrets | jq -r .secret_stk_login);
            $workflow_config login $(echo $api_inputs | jq -r .cli_login_email) --realm $(echo $api_inputs | jq -r .cli_login_realm) --pat $(echo $secrets | jq -r .secret_stk_login);
          
          - echo "Step [8/9] Use workspace";
            echo $workflow_config $(echo $api_inputs | jq -r .use_workspace_cmd | base64 --decode);
            $workflow_config $(echo $api_inputs | jq -r .use_workspace_cmd | base64 --decode)

          # -------------- MOVE TO FOLDER TO SAVE AS ARTIFACT --------------
          # - Create .gitkeep inside ~/.$workflow_config/stacks to avoid init execution more than one time
          - echo "Step [9/9] Move to folder '$BITBUCKET_CLONE_DIR' to save as artifact";
            touch ~/.$workflow_config/stacks/.gitkeep;
            rm -rf .$workflow_config;
            cp -rf ~/.$workflow_config .
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config
        artifacts:
          - .stk/**
          - .stk-alpha/**
          - .stk-dev/**

    - step: &run-action
        name: 'Run Action'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/2] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh
          
          - echo "Step [2/2] Run action.";
            run_action_cmd=$(echo $api_inputs | jq -r .run_action_cmd | base64 --decode);
            echo "$workflow_config $run_action_cmd";
            eval "$workflow_config $run_action_cmd";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config

    - step: &create-register-run-actions
        name: 'Create'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/11] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh
            
          # ------------------------- CONFIGURE DEBUG -------------------------
          - echo "Step [2/11] Configure DEBUG MODE.";
            if [ $debug == "true" ]; then
              export APPLY_PLUGIN_ENABLE_DEBUG=true;
              export COMMAND_ARGS_ENABLE_DEBUG=true;
              export HTTP_ENABLE_DEBUG=true;
              echo -e "$green DEBUG MODE ENABLED";
            else
              echo -e "$green DEBUG MODE DISABLED";
            fi;

          # ------------------------- PARSE INPUTS -------------------------
          - echo "Step [3/11] Parse inputs.";
            workspace_pat=$(echo "$secrets" | jq -cr .secret_git);
            workspace_name=$BITBUCKET_WORKSPACE;

            name=$(echo "$api_inputs" | jq -cr .create_name);
            repo_url=$(echo "$api_inputs" | jq -cr .create_repo);
            repo_name="${repo_url##*/}";
            if [ -z "$repo_name" ] || [ "$repo_name" == "null" ]; then
              repo_name=$name;
            fi;
            
            email=$(echo "$api_inputs" | jq -cr .cli_login_email);
            create_type=$(echo "$api_inputs" | jq -cr .create_entity_type);

            run_actions_before_cmd=$(echo "$api_inputs" | jq -cr .run_actions_before_cmd | base64 --decode);
            run_actions_after_cmd=$(echo "$api_inputs" | jq -cr .run_actions_after_cmd | base64 --decode);
            create_cmd=$(echo "$api_inputs" | jq -cr .create_cmd | base64 --decode);
            update_cmd=$(echo "$api_inputs" | jq -cr .update_cmd | base64 --decode);

          # ---------------------- RUN ACTIONS BEFORE ----------------------
          - echo "Step [4/11] Run actions before.";
            echo "$workflow_config $run_actions_before_cmd";
            eval "$workflow_config $run_actions_before_cmd";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi

          # ----------------------- CLONE REPOSITORY -----------------------
          - echo "Step [5/11] Clone repository.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh;
            $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh "$repo_name" "$workspace_pat" "$email" "$workspace_name" "project_cloned";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;
            cd project_cloned;
          
          # ----------------------- CREATE APP/INFRA -----------------------
          - echo "Step [6/11] Create $create_type";
            (echo "$api_inputs" | jq -cr .create_file | base64 --decode) > create_file.yml;
            echo "$workflow_config $create_cmd --spec create_file.yml";
            $workflow_config $create_cmd --spec create_file.yml;
            rm -f create_file.yml;
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
        
          # ---------------------- UPDATE APP/INFRA ----------------------
          - echo "Step [7/11] Config update $create_type.";
            cd $name;
            echo "$workflow_config $update_cmd";
            eval "$workflow_config $update_cmd";

            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;
            
          # ------------------------- COMMIT/PUSH --------------------------
          - echo "Step [8/11] Commit and push.";
            echo -e "\n$green Commit and push\n";
            cd ..;
            rm -rf $name/.git;
            cp -r $name/. .;
            rm -fr $name;
            branch_name=stackspot-$(date +%s);
            git checkout -b $branch_name;
            git add -A;
            git commit -am "stackspot initial commit";
            git push origin $branch_name;

          # --------------------- CREATE PULL REQUEST ----------------------
          - echo "Step [9/11] Create pull request.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh;
            $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh $workspace_name $repo_name $workspace_pat $name $branch_name $default_branch "Stackspot create $create_type $name";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi

          # ----------------------- RUN ACTIONS AFTER ----------------------
          - echo "Step [10/11] Run actions after.";
            echo "$workflow_config $run_actions_after_cmd";
            eval "$workflow_config $run_actions_after_cmd";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi

          - echo "Step [11/11] Commit and push.";
            if [[ `git status --porcelain` ]]; then
              branch=$(git symbolic-ref --short HEAD);
              git add -A;
              git commit -am "stackspot commit after actions";
              git push origin $branch;
            else
              echo "Nothing to commit";
            fi;
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config

    - step: &apply-plugin
        name: 'Apply Plugin'{{runners}}
        script:
          # Copy to home directory .stk or .stk-alpha, update PATH with binary path and add variable colors
          - echo "Step [1/6] Configure pipeline.";
            mv .$workflow_config ~/;
            export PATH="$PATH:~/.$workflow_config/bin";
            source $BITBUCKET_CLONE_DIR/scripts/enable_colors.sh

          - echo "Step [2/6] Parse inputs.";
            plugin_name=$(echo $api_inputs | jq -r .plugin_name);
            repo_url=$(echo $api_inputs | jq -r .repo);
            repo_name="${repo_url##*/}";
            email=$(echo $api_inputs | jq -r .cli_login_email);
            workspace_pat=$(echo $secrets | jq -r .secret_git);
            workspace_name=$BITBUCKET_WORKSPACE;

            apply_plugin_cmd=$(echo $api_inputs | jq -r .apply_plugin_cmd | base64 --decode);

          # ----------------------- CLONE REPOSITORY -----------------------
          - echo "Step [3/6] Clone repository.";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh;
            $BITBUCKET_CLONE_DIR/scripts/clone-repository.sh $repo_name $workspace_pat $email $workspace_name "project_cloned";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi;
            cd project_cloned;
          
          # ----------------------- APPLY PLUGIN -----------------------
          - echo "Step [4/6] Apply plugin.";
            echo "$workflow_config $apply_plugin_cmd";
            eval "$workflow_config $apply_plugin_cmd";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
          
          # ------------------------- COMMIT/PUSH --------------------------
          - echo "Step [5/6] Commit and push";
            echo -e "\n$green Commit and push\n";
            branch_name=stackspot-$(date +%s);
            git checkout -b $branch_name;
            git add -A;
            git commit -am "stackspot initial commit";
            git push origin $branch_name;

          # --------------------- CREATE PULL REQUEST ----------------------
          - echo "Step [6/6] Create pull request";
            chmod +x $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh;
            $BITBUCKET_CLONE_DIR/scripts/create-pull-request.sh $workspace_name $repo_name $workspace_pat $plugin_name $branch_name $default_branch "Applying the plugin ${plugin_name}";
            exit_code_of_command=$?;
            if [ "$exit_code_of_command" != "0" ]; then
              exit $exit_code_of_command;
            fi
        after-script:
          - chmod +x $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh;
            $BITBUCKET_CLONE_DIR/scripts/show_stk_logs_file.sh $BITBUCKET_EXIT_CODE $workflow_config

pipelines:
  custom:
    create-app:
      - variables:
        - name: api_inputs
        - name: correlation_id
        - name: secrets
        - name: default_branch
          default: main
      - step: *install-stk-login-use-workspace
      - step:
          <<: *create-register-run-actions
          name: 'Create App'
    create-infra:
      - variables:
        - name: api_inputs
        - name: correlation_id
        - name: secrets
        - name: default_branch
          default: main
      - step: *install-stk-login-use-workspace
      - step:
          <<: *create-register-run-actions
          name: 'Create Infra'
    run-action:
      - variables:
        - name: api_inputs
        - name: correlation_id
        - name: secrets
      - step: *install-stk-login-use-workspace
      - step: *run-action
    apply-plugin:
      - variables:
        - name: api_inputs
        - name: correlation_id
        - name: secrets
        - name: default_branch
          default: main
      - step: *install-stk-login-use-workspace
      - step: *apply-plugin